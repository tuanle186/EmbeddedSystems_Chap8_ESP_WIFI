
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003008  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa7c  0800aa7c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa84  0800aa84  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aa8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003c4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000043c  2000043c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020aa8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042f8  00000000  00000000  00040b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00044e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  000464d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267fa  00000000  00000000  000479a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f226  00000000  00000000  0006e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e01a3  00000000  00000000  0008d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016d56b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006034  00000000  00000000  0016d5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a5c 	.word	0x08007a5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007a5c 	.word	0x08007a5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_ADC1_Init+0x108>)
 800058c:	4a3d      	ldr	r2, [pc, #244]	; (8000684 <MX_ADC1_Init+0x10c>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <MX_ADC1_Init+0x108>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <MX_ADC1_Init+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_ADC1_Init+0x108>)
 800059e:	2201      	movs	r2, #1
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <MX_ADC1_Init+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b8:	4a33      	ldr	r2, [pc, #204]	; (8000688 <MX_ADC1_Init+0x110>)
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <MX_ADC1_Init+0x108>)
 80005c4:	2205      	movs	r2, #5
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d6:	482a      	ldr	r0, [pc, #168]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d8:	f001 fef8 	bl	80023cc <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f001 f987 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <MX_ADC1_Init+0x108>)
 80005f8:	f002 f85a 	bl	80026b0 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000602:	f001 f977 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000606:	2309      	movs	r3, #9
 8000608:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	481b      	ldr	r0, [pc, #108]	; (8000680 <MX_ADC1_Init+0x108>)
 8000614:	f002 f84c 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800061e:	f001 f969 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000622:	230a      	movs	r3, #10
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_ADC1_Init+0x108>)
 8000630:	f002 f83e 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800063a:	f001 f95b 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800063e:	230b      	movs	r3, #11
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x108>)
 800064c:	f002 f830 	bl	80026b0 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000656:	f001 f94d 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800065a:	230c      	movs	r3, #12
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800065e:	2305      	movs	r3, #5
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_ADC1_Init+0x108>)
 8000668:	f002 f822 	bl	80026b0 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000672:	f001 f93f 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000bc 	.word	0x200000bc
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <HAL_ADC_MspInit+0x110>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d171      	bne.n	8000792 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000702:	2307      	movs	r3, #7
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <HAL_ADC_MspInit+0x118>)
 8000716:	f002 ff7f 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <HAL_ADC_MspInit+0x11c>)
 800072e:	f002 ff73 	bl	8003618 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x124>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800074c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000750:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000758:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000778:	f002 fb4c 	bl	8002e14 <HAL_DMA_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000782:	f001 f8b7 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012000 	.word	0x40012000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000104 	.word	0x20000104
 80007b0:	40026410 	.word	0x40026410

080007b4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <button_init+0x14>)
 80007be:	f003 f8c7 	bl	8003950 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020c00 	.word	0x40020c00

080007cc <button_Scan>:

void button_Scan(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	482f      	ldr	r0, [pc, #188]	; (8000894 <button_Scan+0xc8>)
 80007d8:	f003 f8ba 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	482c      	ldr	r0, [pc, #176]	; (8000894 <button_Scan+0xc8>)
 80007e2:	f003 f8b5 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007e6:	230a      	movs	r3, #10
 80007e8:	2202      	movs	r2, #2
 80007ea:	492b      	ldr	r1, [pc, #172]	; (8000898 <button_Scan+0xcc>)
 80007ec:	482b      	ldr	r0, [pc, #172]	; (800089c <button_Scan+0xd0>)
 80007ee:	f004 f860 	bl	80048b2 <HAL_SPI_Receive>
	  int button_index = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	e03f      	b.n	8000882 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db06      	blt.n	8000816 <button_Scan+0x4a>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b03      	cmp	r3, #3
 800080c:	dc03      	bgt.n	8000816 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3304      	adds	r3, #4
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e018      	b.n	8000848 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b03      	cmp	r3, #3
 800081a:	dd07      	ble.n	800082c <button_Scan+0x60>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b07      	cmp	r3, #7
 8000820:	dc04      	bgt.n	800082c <button_Scan+0x60>
			  button_index = 7 - i;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f1c3 0307 	rsb	r3, r3, #7
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e00d      	b.n	8000848 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b07      	cmp	r3, #7
 8000830:	dd06      	ble.n	8000840 <button_Scan+0x74>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0b      	cmp	r3, #11
 8000836:	dc03      	bgt.n	8000840 <button_Scan+0x74>
			  button_index = i + 4;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3304      	adds	r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e003      	b.n	8000848 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1c3 0317 	rsb	r3, r3, #23
 8000846:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <button_Scan+0xcc>)
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	897b      	ldrh	r3, [r7, #10]
 800084e:	4013      	ands	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <button_Scan+0x96>
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <button_Scan+0xd4>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2100      	movs	r1, #0
 800085c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000860:	e009      	b.n	8000876 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <button_Scan+0xd4>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086a:	3301      	adds	r3, #1
 800086c:	b299      	uxth	r1, r3
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <button_Scan+0xd4>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000876:	897b      	ldrh	r3, [r7, #10]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	ddbc      	ble.n	8000802 <button_Scan+0x36>
	  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020c00 	.word	0x40020c00
 8000898:	20000094 	.word	0x20000094
 800089c:	20000270 	.word	0x20000270
 80008a0:	20000164 	.word	0x20000164

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f002 fa6b 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f002 fa84 	bl	8002dde <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000912:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000916:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_FSMC_Init+0xec>)
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <MX_FSMC_Init+0xf0>)
 800091c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_FSMC_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000932:	2210      	movs	r2, #16
 8000934:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_FSMC_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_FSMC_Init+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_FSMC_Init+0xec>)
 800095e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_FSMC_Init+0xec>)
 800096c:	2200      	movs	r2, #0
 800096e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000976:	230f      	movs	r3, #15
 8000978:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800097a:	230f      	movs	r3, #15
 800097c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800097e:	233c      	movs	r3, #60	; 0x3c
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000986:	2310      	movs	r3, #16
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800098a:	2311      	movs	r3, #17
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000992:	2308      	movs	r3, #8
 8000994:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800099a:	2309      	movs	r3, #9
 800099c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009a2:	2310      	movs	r3, #16
 80009a4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009a6:	2311      	movs	r3, #17
 80009a8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009ae:	463a      	mov	r2, r7
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_FSMC_Init+0xec>)
 80009b8:	f004 fb5e 	bl	8005078 <HAL_SRAM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009c2:	f000 ff97 	bl	80018f4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009c6:	bf00      	nop
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000184 	.word	0x20000184
 80009d4:	a0000104 	.word	0xa0000104

080009d8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_FSMC_MspInit+0x88>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d131      	bne.n	8000a58 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_FSMC_MspInit+0x88>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6393      	str	r3, [r2, #56]	; 0x38
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a16:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <HAL_FSMC_MspInit+0x90>)
 8000a32:	f002 fdf1 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a36:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <HAL_FSMC_MspInit+0x94>)
 8000a52:	f002 fde1 	bl	8003618 <HAL_GPIO_Init>
 8000a56:	e000      	b.n	8000a5a <HAL_FSMC_MspInit+0x82>
    return;
 8000a58:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000098 	.word	0x20000098
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a78:	f7ff ffae 	bl	80009d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b8f      	ldr	r3, [pc, #572]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a8e      	ldr	r2, [pc, #568]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b8c      	ldr	r3, [pc, #560]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b85      	ldr	r3, [pc, #532]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a80      	ldr	r2, [pc, #512]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b7e      	ldr	r3, [pc, #504]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b77      	ldr	r3, [pc, #476]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b73      	ldr	r3, [pc, #460]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a72      	ldr	r2, [pc, #456]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b70      	ldr	r3, [pc, #448]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b6c      	ldr	r3, [pc, #432]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a6b      	ldr	r2, [pc, #428]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b65      	ldr	r3, [pc, #404]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a64      	ldr	r2, [pc, #400]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b62      	ldr	r3, [pc, #392]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a5d      	ldr	r2, [pc, #372]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2170      	movs	r1, #112	; 0x70
 8000b7e:	4858      	ldr	r0, [pc, #352]	; (8000ce0 <MX_GPIO_Init+0x25c>)
 8000b80:	f002 fee6 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b8a:	4856      	ldr	r0, [pc, #344]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000b8c:	f002 fee0 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b96:	4854      	ldr	r0, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000b98:	f002 feda 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ba2:	4852      	ldr	r0, [pc, #328]	; (8000cec <MX_GPIO_Init+0x268>)
 8000ba4:	f002 fed4 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	4850      	ldr	r0, [pc, #320]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000bb0:	f002 fece 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	484e      	ldr	r0, [pc, #312]	; (8000cf4 <MX_GPIO_Init+0x270>)
 8000bba:	f002 fec9 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bbe:	2370      	movs	r3, #112	; 0x70
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4842      	ldr	r0, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x25c>)
 8000bd6:	f002 fd1f 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bda:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000bf4:	f002 fd10 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000c0e:	f002 fd03 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000c2c:	f002 fcf4 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000c44:	f002 fce8 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c48:	2330      	movs	r3, #48	; 0x30
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000c5c:	f002 fcdc 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c60:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <MX_GPIO_Init+0x268>)
 8000c7a:	f002 fccd 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c7e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000c94:	f002 fcc0 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000cb2:	f002 fcb1 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MX_GPIO_Init+0x270>)
 8000cce:	f002 fca3 	bl	8003618 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	40021800 	.word	0x40021800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <MX_I2C1_Init+0x54>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x58>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d36:	f002 fe3f 	bl	80039b8 <HAL_I2C_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d40:	f000 fdd8 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001d4 	.word	0x200001d4
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	000186a0 	.word	0x000186a0

08000d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da2:	2304      	movs	r3, #4
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_I2C_MspInit+0x8c>)
 8000dae:	f002 fc33 	bl	8003618 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <LCD_WR_REG+0x1c>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	8013      	strh	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	600ffffe 	.word	0x600ffffe

08000e04 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <LCD_WR_DATA+0x1c>)
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	8053      	strh	r3, [r2, #2]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	600ffffe 	.word	0x600ffffe

08000e24 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <LCD_RD_DATA+0x20>)
 8000e2c:	885b      	ldrh	r3, [r3, #2]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	b29b      	uxth	r3, r3
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	600ffffe 	.word	0x600ffffe

08000e48 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e66:	202a      	movs	r0, #42	; 0x2a
 8000e68:	f7ff ffbc 	bl	8000de4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc6 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffc0 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffba 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffb4 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e9c:	202b      	movs	r0, #43	; 0x2b
 8000e9e:	f7ff ffa1 	bl	8000de4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffab 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffa5 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000eba:	883b      	ldrh	r3, [r7, #0]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff9f 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff99 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ed2:	202c      	movs	r0, #44	; 0x2c
 8000ed4:	f7ff ff86 	bl	8000de4 <LCD_WR_REG>
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <lcd_Clear+0x60>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <lcd_Clear+0x60>)
 8000ef4:	885b      	ldrh	r3, [r3, #2]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ffa3 	bl	8000e48 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	e011      	b.n	8000f2c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81bb      	strh	r3, [r7, #12]
 8000f0c:	e006      	b.n	8000f1c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff77 	bl	8000e04 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81bb      	strh	r3, [r7, #12]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <lcd_Clear+0x60>)
 8000f1e:	885b      	ldrh	r3, [r3, #2]
 8000f20:	89ba      	ldrh	r2, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3f3      	bcc.n	8000f0e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	81fb      	strh	r3, [r7, #14]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <lcd_Clear+0x60>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	89fa      	ldrh	r2, [r7, #14]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3e8      	bcc.n	8000f08 <lcd_Clear+0x28>
		}
	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000228 	.word	0x20000228

08000f44 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	88b9      	ldrh	r1, [r7, #4]
 8000f5c:	88f8      	ldrh	r0, [r7, #6]
 8000f5e:	f7ff ff73 	bl	8000e48 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff4d 	bl	8000e04 <LCD_WR_DATA>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4603      	mov	r3, r0
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	fb12 f303 	smulbb	r3, r2, r3
 8000fca:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	3b20      	subs	r3, #32
 8000fd0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	b29c      	uxth	r4, r3
 8000fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	88b9      	ldrh	r1, [r7, #4]
 8000ff2:	88f8      	ldrh	r0, [r7, #6]
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	f7ff ff27 	bl	8000e48 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	827b      	strh	r3, [r7, #18]
 8000ffe:	e07a      	b.n	80010f6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001004:	2b0c      	cmp	r3, #12
 8001006:	d028      	beq.n	800105a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800100c:	2b10      	cmp	r3, #16
 800100e:	d108      	bne.n	8001022 <lcd_ShowChar+0xae>
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	8a7b      	ldrh	r3, [r7, #18]
 8001014:	493c      	ldr	r1, [pc, #240]	; (8001108 <lcd_ShowChar+0x194>)
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	440a      	add	r2, r1
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	75fb      	strb	r3, [r7, #23]
 8001020:	e01b      	b.n	800105a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001022:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001026:	2b18      	cmp	r3, #24
 8001028:	d10b      	bne.n	8001042 <lcd_ShowChar+0xce>
 800102a:	78fa      	ldrb	r2, [r7, #3]
 800102c:	8a79      	ldrh	r1, [r7, #18]
 800102e:	4837      	ldr	r0, [pc, #220]	; (800110c <lcd_ShowChar+0x198>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4403      	add	r3, r0
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	75fb      	strb	r3, [r7, #23]
 8001040:	e00b      	b.n	800105a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001042:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001046:	2b20      	cmp	r3, #32
 8001048:	d15a      	bne.n	8001100 <lcd_ShowChar+0x18c>
 800104a:	78fa      	ldrb	r2, [r7, #3]
 800104c:	8a7b      	ldrh	r3, [r7, #18]
 800104e:	4930      	ldr	r1, [pc, #192]	; (8001110 <lcd_ShowChar+0x19c>)
 8001050:	0192      	lsls	r2, r2, #6
 8001052:	440a      	add	r2, r1
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800105a:	2300      	movs	r3, #0
 800105c:	75bb      	strb	r3, [r7, #22]
 800105e:	e044      	b.n	80010ea <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001060:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001064:	2b00      	cmp	r3, #0
 8001066:	d120      	bne.n	80010aa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001068:	7dfa      	ldrb	r2, [r7, #23]
 800106a:	7dbb      	ldrb	r3, [r7, #22]
 800106c:	fa42 f303 	asr.w	r3, r2, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <lcd_ShowChar+0x10e>
 8001078:	883b      	ldrh	r3, [r7, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fec2 	bl	8000e04 <LCD_WR_DATA>
 8001080:	e003      	b.n	800108a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001082:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff febd 	bl	8000e04 <LCD_WR_DATA>
				m++;
 800108a:	7d7b      	ldrb	r3, [r7, #21]
 800108c:	3301      	adds	r3, #1
 800108e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001090:	7d7b      	ldrb	r3, [r7, #21]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	fbb3 f1f2 	udiv	r1, r3, r2
 8001098:	fb02 f201 	mul.w	r2, r2, r1
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d11f      	bne.n	80010e4 <lcd_ShowChar+0x170>
				{
					m=0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	757b      	strb	r3, [r7, #21]
					break;
 80010a8:	e022      	b.n	80010f0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80010aa:	7dfa      	ldrb	r2, [r7, #23]
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	fa42 f303 	asr.w	r3, r2, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <lcd_ShowChar+0x152>
 80010ba:	883a      	ldrh	r2, [r7, #0]
 80010bc:	88b9      	ldrh	r1, [r7, #4]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff3f 	bl	8000f44 <lcd_DrawPoint>
				x++;
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	3301      	adds	r3, #1
 80010ca:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	8a3b      	ldrh	r3, [r7, #16]
 80010d0:	1ad2      	subs	r2, r2, r3
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d105      	bne.n	80010e4 <lcd_ShowChar+0x170>
				{
					x=x0;
 80010d8:	8a3b      	ldrh	r3, [r7, #16]
 80010da:	80fb      	strh	r3, [r7, #6]
					y++;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	3301      	adds	r3, #1
 80010e0:	80bb      	strh	r3, [r7, #4]
					break;
 80010e2:	e005      	b.n	80010f0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75bb      	strb	r3, [r7, #22]
 80010ea:	7dbb      	ldrb	r3, [r7, #22]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d9b7      	bls.n	8001060 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80010f0:	8a7b      	ldrh	r3, [r7, #18]
 80010f2:	3301      	adds	r3, #1
 80010f4:	827b      	strh	r3, [r7, #18]
 80010f6:	8a7a      	ldrh	r2, [r7, #18]
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d380      	bcc.n	8001000 <lcd_ShowChar+0x8c>
 80010fe:	e000      	b.n	8001102 <lcd_ShowChar+0x18e>
		else return;
 8001100:	bf00      	nop
				}
			}
		}
	}
}
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	08007aa8 	.word	0x08007aa8
 800110c:	08008098 	.word	0x08008098
 8001110:	08009268 	.word	0x08009268

08001114 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <lcd_SetDir+0x44>)
 8001130:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001134:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <lcd_SetDir+0x44>)
 8001138:	22f0      	movs	r2, #240	; 0xf0
 800113a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800113c:	e006      	b.n	800114c <lcd_SetDir+0x38>
		lcddev.width=240;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <lcd_SetDir+0x44>)
 8001140:	22f0      	movs	r2, #240	; 0xf0
 8001142:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <lcd_SetDir+0x44>)
 8001146:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800114a:	805a      	strh	r2, [r3, #2]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000228 	.word	0x20000228

0800115c <lcd_init>:


void lcd_init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001166:	48aa      	ldr	r0, [pc, #680]	; (8001410 <lcd_init+0x2b4>)
 8001168:	f002 fbf2 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800116c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001170:	f001 f908 	bl	8002384 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	48a5      	ldr	r0, [pc, #660]	; (8001410 <lcd_init+0x2b4>)
 800117c:	f002 fbe8 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001180:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001184:	f001 f8fe 	bl	8002384 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff ffc3 	bl	8001114 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800118e:	20d3      	movs	r0, #211	; 0xd3
 8001190:	f7ff fe28 	bl	8000de4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001194:	f7ff fe46 	bl	8000e24 <LCD_RD_DATA>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b9d      	ldr	r3, [pc, #628]	; (8001414 <lcd_init+0x2b8>)
 800119e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011a0:	f7ff fe40 	bl	8000e24 <LCD_RD_DATA>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b9a      	ldr	r3, [pc, #616]	; (8001414 <lcd_init+0x2b8>)
 80011aa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011ac:	f7ff fe3a 	bl	8000e24 <LCD_RD_DATA>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b97      	ldr	r3, [pc, #604]	; (8001414 <lcd_init+0x2b8>)
 80011b6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011b8:	4b96      	ldr	r3, [pc, #600]	; (8001414 <lcd_init+0x2b8>)
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b94      	ldr	r3, [pc, #592]	; (8001414 <lcd_init+0x2b8>)
 80011c2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011c4:	f7ff fe2e 	bl	8000e24 <LCD_RD_DATA>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b91      	ldr	r3, [pc, #580]	; (8001414 <lcd_init+0x2b8>)
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <lcd_init+0x2b8>)
 80011d6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011d8:	20cf      	movs	r0, #207	; 0xcf
 80011da:	f7ff fe03 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fe10 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011e4:	20c1      	movs	r0, #193	; 0xc1
 80011e6:	f7ff fe0d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011ea:	2030      	movs	r0, #48	; 0x30
 80011ec:	f7ff fe0a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011f0:	20ed      	movs	r0, #237	; 0xed
 80011f2:	f7ff fdf7 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f7ff fe04 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f7ff fe01 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001202:	2012      	movs	r0, #18
 8001204:	f7ff fdfe 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001208:	2081      	movs	r0, #129	; 0x81
 800120a:	f7ff fdfb 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800120e:	20e8      	movs	r0, #232	; 0xe8
 8001210:	f7ff fde8 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001214:	2085      	movs	r0, #133	; 0x85
 8001216:	f7ff fdf5 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800121a:	2010      	movs	r0, #16
 800121c:	f7ff fdf2 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001220:	207a      	movs	r0, #122	; 0x7a
 8001222:	f7ff fdef 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001226:	20cb      	movs	r0, #203	; 0xcb
 8001228:	f7ff fddc 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800122c:	2039      	movs	r0, #57	; 0x39
 800122e:	f7ff fde9 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001232:	202c      	movs	r0, #44	; 0x2c
 8001234:	f7ff fde6 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fde3 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800123e:	2034      	movs	r0, #52	; 0x34
 8001240:	f7ff fde0 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001244:	2002      	movs	r0, #2
 8001246:	f7ff fddd 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800124a:	20f7      	movs	r0, #247	; 0xf7
 800124c:	f7ff fdca 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001250:	2020      	movs	r0, #32
 8001252:	f7ff fdd7 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001256:	20ea      	movs	r0, #234	; 0xea
 8001258:	f7ff fdc4 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fdd1 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fdce 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001268:	20c0      	movs	r0, #192	; 0xc0
 800126a:	f7ff fdbb 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800126e:	201b      	movs	r0, #27
 8001270:	f7ff fdc8 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001274:	20c1      	movs	r0, #193	; 0xc1
 8001276:	f7ff fdb5 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fdc2 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001280:	20c5      	movs	r0, #197	; 0xc5
 8001282:	f7ff fdaf 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001286:	2030      	movs	r0, #48	; 0x30
 8001288:	f7ff fdbc 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800128c:	2030      	movs	r0, #48	; 0x30
 800128e:	f7ff fdb9 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001292:	20c7      	movs	r0, #199	; 0xc7
 8001294:	f7ff fda6 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001298:	20b7      	movs	r0, #183	; 0xb7
 800129a:	f7ff fdb3 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800129e:	2036      	movs	r0, #54	; 0x36
 80012a0:	f7ff fda0 	bl	8000de4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f7ff fdad 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80012aa:	203a      	movs	r0, #58	; 0x3a
 80012ac:	f7ff fd9a 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80012b0:	2055      	movs	r0, #85	; 0x55
 80012b2:	f7ff fda7 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012b6:	20b1      	movs	r0, #177	; 0xb1
 80012b8:	f7ff fd94 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fda1 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012c2:	201a      	movs	r0, #26
 80012c4:	f7ff fd9e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012c8:	20b6      	movs	r0, #182	; 0xb6
 80012ca:	f7ff fd8b 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fd98 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012d4:	20a2      	movs	r0, #162	; 0xa2
 80012d6:	f7ff fd95 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012da:	20f2      	movs	r0, #242	; 0xf2
 80012dc:	f7ff fd82 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fd8f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012e6:	2026      	movs	r0, #38	; 0x26
 80012e8:	f7ff fd7c 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fd89 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012f2:	20e0      	movs	r0, #224	; 0xe0
 80012f4:	f7ff fd76 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fd83 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012fe:	202a      	movs	r0, #42	; 0x2a
 8001300:	f7ff fd80 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001304:	2028      	movs	r0, #40	; 0x28
 8001306:	f7ff fd7d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800130a:	2008      	movs	r0, #8
 800130c:	f7ff fd7a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001310:	200e      	movs	r0, #14
 8001312:	f7ff fd77 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001316:	2008      	movs	r0, #8
 8001318:	f7ff fd74 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800131c:	2054      	movs	r0, #84	; 0x54
 800131e:	f7ff fd71 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001322:	20a9      	movs	r0, #169	; 0xa9
 8001324:	f7ff fd6e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001328:	2043      	movs	r0, #67	; 0x43
 800132a:	f7ff fd6b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800132e:	200a      	movs	r0, #10
 8001330:	f7ff fd68 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff fd65 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fd62 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fd5f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fd5c 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fd59 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001352:	20e1      	movs	r0, #225	; 0xe1
 8001354:	f7ff fd46 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fd53 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800135e:	2015      	movs	r0, #21
 8001360:	f7ff fd50 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001364:	2017      	movs	r0, #23
 8001366:	f7ff fd4d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800136a:	2007      	movs	r0, #7
 800136c:	f7ff fd4a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001370:	2011      	movs	r0, #17
 8001372:	f7ff fd47 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001376:	2006      	movs	r0, #6
 8001378:	f7ff fd44 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800137c:	202b      	movs	r0, #43	; 0x2b
 800137e:	f7ff fd41 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001382:	2056      	movs	r0, #86	; 0x56
 8001384:	f7ff fd3e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001388:	203c      	movs	r0, #60	; 0x3c
 800138a:	f7ff fd3b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800138e:	2005      	movs	r0, #5
 8001390:	f7ff fd38 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001394:	2010      	movs	r0, #16
 8001396:	f7ff fd35 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff fd32 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013a0:	203f      	movs	r0, #63	; 0x3f
 80013a2:	f7ff fd2f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013a6:	203f      	movs	r0, #63	; 0x3f
 80013a8:	f7ff fd2c 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013ac:	200f      	movs	r0, #15
 80013ae:	f7ff fd29 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80013b2:	202b      	movs	r0, #43	; 0x2b
 80013b4:	f7ff fd16 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fd23 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fd20 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fd1d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013ca:	203f      	movs	r0, #63	; 0x3f
 80013cc:	f7ff fd1a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013d0:	202a      	movs	r0, #42	; 0x2a
 80013d2:	f7ff fd07 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fd14 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fd11 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fd0e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013e8:	20ef      	movs	r0, #239	; 0xef
 80013ea:	f7ff fd0b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013ee:	2011      	movs	r0, #17
 80013f0:	f7ff fcf8 	bl	8000de4 <LCD_WR_REG>
	HAL_Delay(120);
 80013f4:	2078      	movs	r0, #120	; 0x78
 80013f6:	f000 ffc5 	bl	8002384 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013fa:	2029      	movs	r0, #41	; 0x29
 80013fc:	f7ff fcf2 	bl	8000de4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <lcd_init+0x2bc>)
 8001408:	f002 faa2 	bl	8003950 <HAL_GPIO_WritePin>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020800 	.word	0x40020800
 8001414:	20000228 	.word	0x20000228
 8001418:	40020000 	.word	0x40020000

0800141c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af04      	add	r7, sp, #16
 8001422:	60ba      	str	r2, [r7, #8]
 8001424:	461a      	mov	r2, r3
 8001426:	4603      	mov	r3, r0
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	460b      	mov	r3, r1
 800142c:	81bb      	strh	r3, [r7, #12]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800143a:	e048      	b.n	80014ce <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d145      	bne.n	80014ce <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <lcd_ShowStr+0xc4>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	429a      	cmp	r2, r3
 8001456:	dc3f      	bgt.n	80014d8 <lcd_ShowStr+0xbc>
 8001458:	89ba      	ldrh	r2, [r7, #12]
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <lcd_ShowStr+0xc4>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	4619      	mov	r1, r3
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001464:	1acb      	subs	r3, r1, r3
 8001466:	429a      	cmp	r2, r3
 8001468:	dc36      	bgt.n	80014d8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b80      	cmp	r3, #128	; 0x80
 8001470:	d902      	bls.n	8001478 <lcd_ShowStr+0x5c>
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
 8001476:	e02a      	b.n	80014ce <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b0d      	cmp	r3, #13
 800147e:	d10b      	bne.n	8001498 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001484:	b29a      	uxth	r2, r3
 8001486:	89bb      	ldrh	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800148c:	8abb      	ldrh	r3, [r7, #20]
 800148e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3301      	adds	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	e017      	b.n	80014c8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	88fc      	ldrh	r4, [r7, #6]
 800149e:	89b9      	ldrh	r1, [r7, #12]
 80014a0:	89f8      	ldrh	r0, [r7, #14]
 80014a2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4623      	mov	r3, r4
 80014b4:	f7ff fd5e 	bl	8000f74 <lcd_ShowChar>
					x+=sizey/2;
 80014b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	4413      	add	r3, r2
 80014c6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1b2      	bne.n	800143c <lcd_ShowStr+0x20>
 80014d6:	e000      	b.n	80014da <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014d8:	bf00      	nop
			}
		}
	}
}
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	20000228 	.word	0x20000228

080014e4 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <led7_Scan+0x104>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <led7_Scan+0x104>)
 80014f2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <led7_Scan+0x108>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <led7_Scan+0x10c>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <led7_Scan+0x104>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <led7_Scan+0x104>)
 800150e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <led7_Scan+0x108>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d847      	bhi.n	80015a8 <led7_Scan+0xc4>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <led7_Scan+0x3c>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001531 	.word	0x08001531
 8001524:	0800154f 	.word	0x0800154f
 8001528:	0800156d 	.word	0x0800156d
 800152c:	0800158b 	.word	0x0800158b
	case 0:
		spi_buffer |= 0x00b0;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <led7_Scan+0x104>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <led7_Scan+0x104>)
 800153c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <led7_Scan+0x104>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <led7_Scan+0x104>)
 800154a:	801a      	strh	r2, [r3, #0]
		break;
 800154c:	e02d      	b.n	80015aa <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <led7_Scan+0x104>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <led7_Scan+0x104>)
 800155a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <led7_Scan+0x104>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f023 0320 	bic.w	r3, r3, #32
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <led7_Scan+0x104>)
 8001568:	801a      	strh	r2, [r3, #0]
		break;
 800156a:	e01e      	b.n	80015aa <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <led7_Scan+0x104>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <led7_Scan+0x104>)
 8001578:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <led7_Scan+0x104>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	f023 0310 	bic.w	r3, r3, #16
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <led7_Scan+0x104>)
 8001586:	801a      	strh	r2, [r3, #0]
		break;
 8001588:	e00f      	b.n	80015aa <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <led7_Scan+0x104>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <led7_Scan+0x104>)
 8001596:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <led7_Scan+0x104>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <led7_Scan+0x104>)
 80015a4:	801a      	strh	r2, [r3, #0]
		break;
 80015a6:	e000      	b.n	80015aa <led7_Scan+0xc6>
	default:
		break;
 80015a8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <led7_Scan+0x108>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	425a      	negs	r2, r3
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	bf58      	it	pl
 80015bc:	4253      	negpl	r3, r2
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <led7_Scan+0x108>)
 80015c0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <led7_Scan+0x110>)
 80015c8:	f002 f9c2 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015cc:	2301      	movs	r3, #1
 80015ce:	2202      	movs	r2, #2
 80015d0:	4905      	ldr	r1, [pc, #20]	; (80015e8 <led7_Scan+0x104>)
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <led7_Scan+0x114>)
 80015d4:	f003 f831 	bl	800463a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <led7_Scan+0x110>)
 80015de:	f002 f9b7 	bl	8003950 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	2000009c 	.word	0x2000009c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	40021800 	.word	0x40021800
 80015f8:	20000270 	.word	0x20000270

080015fc <lightProcess>:
#include "light_control.h"
#include "sensor.h"

uint8_t light_status = 0;

void lightProcess(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <lightProcess+0x58>)
 8001602:	8b5b      	ldrh	r3, [r3, #26]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d113      	bne.n	8001630 <lightProcess+0x34>
		light_status = 1 - light_status;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <lightProcess+0x5c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f1c3 0301 	rsb	r3, r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <lightProcess+0x5c>)
 8001614:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <lightProcess+0x5c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d104      	bne.n	8001628 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 800161e:	2101      	movs	r1, #1
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <lightProcess+0x60>)
 8001622:	f000 fcc7 	bl	8001fb4 <uart_EspSendBytes>
 8001626:	e003      	b.n	8001630 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8001628:	2101      	movs	r1, #1
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <lightProcess+0x64>)
 800162c:	f000 fcc2 	bl	8001fb4 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <lightProcess+0x5c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8001638:	2201      	movs	r2, #1
 800163a:	2120      	movs	r1, #32
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <lightProcess+0x68>)
 800163e:	f002 f987 	bl	8003950 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8001642:	e004      	b.n	800164e <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2120      	movs	r1, #32
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <lightProcess+0x68>)
 800164a:	f002 f981 	bl	8003950 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000164 	.word	0x20000164
 8001658:	200000a0 	.word	0x200000a0
 800165c:	08007a74 	.word	0x08007a74
 8001660:	08007a78 	.word	0x08007a78
 8001664:	40021000 	.word	0x40021000

08001668 <test_Esp>:

uint16_t elapsedTime = 0;
void test_Esp() {
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af04      	add	r7, sp, #16
	elapsedTime += 50;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <test_Esp+0xd4>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	3332      	adds	r3, #50	; 0x32
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <test_Esp+0xd4>)
 8001678:	801a      	strh	r2, [r3, #0]
	if (elapsedTime >= 1000) {
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <test_Esp+0xd4>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001682:	d357      	bcc.n	8001734 <test_Esp+0xcc>
		elapsedTime = 0;
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <test_Esp+0xd4>)
 8001686:	2200      	movs	r2, #0
 8001688:	801a      	strh	r2, [r3, #0]
		if (uart_EspCheck() == 0) {
 800168a:	f000 fcef 	bl	800206c <uart_EspCheck>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d14f      	bne.n	8001734 <test_Esp+0xcc>
			// Display status on LCD
			lcd_ShowStr(10, 50, "Sending Temperature to ESP", GREEN, BLACK, 24, 0);
 8001694:	2300      	movs	r3, #0
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2318      	movs	r3, #24
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <test_Esp+0xd8>)
 80016a6:	2132      	movs	r1, #50	; 0x32
 80016a8:	200a      	movs	r0, #10
 80016aa:	f7ff feb7 	bl	800141c <lcd_ShowStr>

			// Get the temperature reading as a float
			sensor_Read();
 80016ae:	f000 f935 	bl	800191c <sensor_Read>
			float temp = sensor_GetTemperature();
 80016b2:	f000 f941 	bl	8001938 <sensor_GetTemperature>
 80016b6:	ed87 0a06 	vstr	s0, [r7, #24]

			// Extract the integer and fractional parts
			int tempWhole = (int)temp;                    // Integer part of temperature
 80016ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80016be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c2:	ee17 3a90 	vmov	r3, s15
 80016c6:	617b      	str	r3, [r7, #20]
			int tempFraction = (int)((temp - tempWhole) * 100); // Fractional part (2 decimal places)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80016d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016da:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001744 <test_Esp+0xdc>
 80016de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	61fb      	str	r3, [r7, #28]

			// Handle negative fractional part (if temp < 0)
			if (tempFraction < 0) {
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da02      	bge.n	80016f8 <test_Esp+0x90>
				tempFraction = -tempFraction;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	425b      	negs	r3, r3
 80016f6:	61fb      	str	r3, [r7, #28]
			}

			// Create the formatted temperature string
			char tempString[20];  // Ensure the buffer is large enough
			sprintf(tempString, "!TEMP:%d.%02d#", tempWhole, tempFraction);
 80016f8:	4638      	mov	r0, r7
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4912      	ldr	r1, [pc, #72]	; (8001748 <test_Esp+0xe0>)
 8001700:	f005 fd7e 	bl	8007200 <siprintf>

			lcd_ShowStr(10, 100, tempString, GREEN, BLACK, 16, 0);
 8001704:	463a      	mov	r2, r7
 8001706:	2300      	movs	r3, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2310      	movs	r3, #16
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	200a      	movs	r0, #10
 800171a:	f7ff fe7f 	bl	800141c <lcd_ShowStr>


			// Send the formatted string via UART
			uart_EspSendBytes(tempString, strlen(tempString));
 800171e:	463b      	mov	r3, r7
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd55 	bl	80001d0 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	463b      	mov	r3, r7
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fc40 	bl	8001fb4 <uart_EspSendBytes>
		}
	}
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000a2 	.word	0x200000a2
 8001740:	08007a7c 	.word	0x08007a7c
 8001744:	42c80000 	.word	0x42c80000
 8001748:	08007a98 	.word	0x08007a98

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f000 fda6 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001754:	f000 f82e 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001758:	f7ff f994 	bl	8000a84 <MX_GPIO_Init>
  MX_TIM2_Init();
 800175c:	f000 faee 	bl	8001d3c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001760:	f000 f95c 	bl	8001a1c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001764:	f7ff f8be 	bl	80008e4 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001768:	f7ff fac6 	bl	8000cf8 <MX_I2C1_Init>
  MX_TIM13_Init();
 800176c:	f000 fb32 	bl	8001dd4 <MX_TIM13_Init>
  MX_DMA_Init();
 8001770:	f7ff f898 	bl	80008a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001774:	f7fe ff00 	bl	8000578 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001778:	f000 fa90 	bl	8001c9c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800177c:	f000 fcb0 	bl	80020e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001780:	f000 fc84 	bl	800208c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001784:	f000 f880 	bl	8001888 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fba9 	bl	8000ee0 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <main+0x64>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d1fb      	bne.n	800178e <main+0x42>
		  flag_timer2 = 0;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <main+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 800179c:	f7ff f816 	bl	80007cc <button_Scan>
		  test_Esp();
 80017a0:	f7ff ff62 	bl	8001668 <test_Esp>
		  lightProcess();
 80017a4:	f7ff ff2a 	bl	80015fc <lightProcess>
		  test_LedDebug();
 80017a8:	f000 f880 	bl	80018ac <test_LedDebug>
	  if(flag_timer2 == 1){
 80017ac:	e7ef      	b.n	800178e <main+0x42>
 80017ae:	bf00      	nop
 80017b0:	200000a6 	.word	0x200000a6

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	2230      	movs	r2, #48	; 0x30
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fd14 	bl	80071f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <SystemClock_Config+0xcc>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <SystemClock_Config+0xcc>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <SystemClock_Config+0xd0>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <SystemClock_Config+0xd0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181c:	2302      	movs	r3, #2
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001828:	23a8      	movs	r3, #168	; 0xa8
 800182a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001830:	2304      	movs	r3, #4
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f002 fa01 	bl	8003c40 <HAL_RCC_OscConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001844:	f000 f856 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	230f      	movs	r3, #15
 800184a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800185a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2105      	movs	r1, #5
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fc62 	bl	8004130 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001872:	f000 f83f 	bl	80018f4 <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	  timer_init();
 800188c:	f000 f872 	bl	8001974 <timer_init>
	  button_init();
 8001890:	f7fe ff90 	bl	80007b4 <button_init>
	  lcd_init();
 8001894:	f7ff fc62 	bl	800115c <lcd_init>
	  uart_init_esp();
 8001898:	f000 fb76 	bl	8001f88 <uart_init_esp>
	  setTimer2(50);
 800189c:	2032      	movs	r0, #50	; 0x32
 800189e:	f000 f877 	bl	8001990 <setTimer2>
	  sensor_init();
 80018a2:	f000 f82d 	bl	8001900 <sensor_init>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <test_LedDebug+0x3c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <test_LedDebug+0x40>)
 80018b8:	fb83 1302 	smull	r1, r3, r3, r2
 80018bc:	10d9      	asrs	r1, r3, #3
 80018be:	17d3      	asrs	r3, r2, #31
 80018c0:	1ac9      	subs	r1, r1, r3
 80018c2:	460b      	mov	r3, r1
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	1ad1      	subs	r1, r2, r3
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <test_LedDebug+0x3c>)
 80018d0:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <test_LedDebug+0x3c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80018da:	2110      	movs	r1, #16
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <test_LedDebug+0x44>)
 80018de:	f002 f850 	bl	8003982 <HAL_GPIO_TogglePin>
	}
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000a4 	.word	0x200000a4
 80018ec:	66666667 	.word	0x66666667
 80018f0:	40021000 	.word	0x40021000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001904:	2205      	movs	r2, #5
 8001906:	4903      	ldr	r1, [pc, #12]	; (8001914 <sensor_init+0x14>)
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <sensor_init+0x18>)
 800190a:	f000 fda3 	bl	8002454 <HAL_ADC_Start_DMA>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000264 	.word	0x20000264
 8001918:	200000bc 	.word	0x200000bc

0800191c <sensor_Read>:

void sensor_Read(){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8001920:	2205      	movs	r2, #5
 8001922:	4903      	ldr	r1, [pc, #12]	; (8001930 <sensor_Read+0x14>)
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <sensor_Read+0x18>)
 8001926:	f000 fd95 	bl	8002454 <HAL_ADC_Start_DMA>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000264 	.word	0x20000264
 8001934:	200000bc 	.word	0x200000bc

08001938 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <sensor_GetTemperature+0x30>)
 800193e:	891b      	ldrh	r3, [r3, #8]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800196c <sensor_GetTemperature+0x34>
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001970 <sensor_GetTemperature+0x38>
 8001954:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001958:	eef0 7a66 	vmov.f32	s15, s13
}
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	20000264 	.word	0x20000264
 800196c:	43a50000 	.word	0x43a50000
 8001970:	457ff000 	.word	0x457ff000

08001974 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <timer_init+0x14>)
 800197a:	f003 fc79 	bl	8005270 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800197e:	4803      	ldr	r0, [pc, #12]	; (800198c <timer_init+0x18>)
 8001980:	f003 fc0e 	bl	80051a0 <HAL_TIM_Base_Start>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000358 	.word	0x20000358
 800198c:	20000310 	.word	0x20000310

08001990 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <setTimer2+0x2c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <setTimer2+0x2c>)
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <setTimer2+0x30>)
 80019a6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <setTimer2+0x34>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200000aa 	.word	0x200000aa
 80019c0:	200000a8 	.word	0x200000a8
 80019c4:	200000a6 	.word	0x200000a6

080019c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d116      	bne.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019ec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a02:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001a04:	f7ff fd6e 	bl	80014e4 <led7_Scan>
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200000a8 	.word	0x200000a8
 8001a14:	200000a6 	.word	0x200000a6
 8001a18:	200000aa 	.word	0x200000aa

08001a1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <MX_SPI1_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a68:	220a      	movs	r2, #10
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a6e:	f002 fd5b 	bl	8004528 <HAL_SPI_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a78:	f7ff ff3c 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000270 	.word	0x20000270
 8001a84:	40013000 	.word	0x40013000

08001a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_SPI_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12b      	bne.n	8001b02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ae2:	2338      	movs	r3, #56	; 0x38
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af2:	2305      	movs	r3, #5
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <HAL_SPI_MspInit+0x8c>)
 8001afe:	f001 fd8b 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40013000 	.word	0x40013000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 fbc6 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f003 fc1e 	bl	8005402 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000358 	.word	0x20000358

08001bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <USART1_IRQHandler+0x10>)
 8001bd6:	f004 fb59 	bl	800628c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003a0 	.word	0x200003a0

08001be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART2_IRQHandler+0x10>)
 8001bea:	f004 fb4f 	bl	800628c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003e4 	.word	0x200003e4

08001bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA2_Stream0_IRQHandler+0x10>)
 8001bfe:	f001 faa1 	bl	8003144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000104 	.word	0x20000104

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f005 faae 	bl	800719c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20020000 	.word	0x20020000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200000ac 	.word	0x200000ac
 8001c74:	20000440 	.word	0x20000440

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <MX_TIM1_Init+0x9c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001cc0:	2253      	movs	r2, #83	; 0x53
 8001cc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001ce6:	f003 fa0b 	bl	8005100 <HAL_TIM_Base_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f7ff fe00 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001d02:	f003 fd49 	bl	8005798 <HAL_TIM_ConfigClockSource>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d0c:	f7ff fdf2 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM1_Init+0x98>)
 8001d1e:	f004 f915 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d28:	f7ff fde4 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000310 	.word	0x20000310
 8001d38:	40010000 	.word	0x40010000

08001d3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d62:	f240 3247 	movw	r2, #839	; 0x347
 8001d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d70:	2263      	movs	r2, #99	; 0x63
 8001d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d82:	f003 f9bd 	bl	8005100 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d8c:	f7ff fdb2 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001d9e:	f003 fcfb 	bl	8005798 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001da8:	f7ff fda4 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM2_Init+0x94>)
 8001dba:	f004 f8c7 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f7ff fd96 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000358 	.word	0x20000358

08001dd4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <MX_TIM13_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001df4:	f240 3247 	movw	r2, #839	; 0x347
 8001df8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e02:	2263      	movs	r2, #99	; 0x63
 8001e04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e14:	f003 f974 	bl	8005100 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e1e:	f7ff fd69 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001e22:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e24:	f003 fa94 	bl	8005350 <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001e2e:	f7ff fd61 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	; 0x60
 8001e34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e4a:	f003 fbe3 	bl	8005614 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001e54:	f7ff fd4e 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e5a:	f000 f85b 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200002c8 	.word	0x200002c8
 8001e6c:	40001c00 	.word	0x40001c00

08001e70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_TIM_Base_MspInit+0x98>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001e9e:	e02e      	b.n	8001efe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d116      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	201c      	movs	r0, #28
 8001ecc:	f000 ff6b 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed0:	201c      	movs	r0, #28
 8001ed2:	f000 ff84 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e012      	b.n	8001efe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10d      	bne.n	8001efe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_TIM_Base_MspInit+0x9c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40001c00 	.word	0x40001c00

08001f14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_TIM_MspPostInit+0x68>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11e      	bne.n	8001f74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_TIM_MspPostInit+0x6c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_TIM_MspPostInit+0x6c>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_TIM_MspPostInit+0x6c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001f64:	2309      	movs	r3, #9
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_TIM_MspPostInit+0x70>)
 8001f70:	f001 fb52 	bl	8003618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40001c00 	.word	0x40001c00
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021400 	.word	0x40021400

08001f88 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <uart_init_esp+0x20>)
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <uart_init_esp+0x24>)
 8001f92:	f004 f94a 	bl	800622a <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <uart_init_esp+0x28>)
 8001f9e:	f001 fcd7 	bl	8003950 <HAL_GPIO_WritePin>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200000b1 	.word	0x200000b1
 8001fac:	200003e4 	.word	0x200003e4
 8001fb0:	40021400 	.word	0x40021400

08001fb4 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <uart_EspSendBytes+0x20>)
 8001fc8:	f004 f89d 	bl	8006106 <HAL_UART_Transmit>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003e4 	.word	0x200003e4

08001fd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_UART_RxCpltCallback+0x74>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10a      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001fea:	230a      	movs	r3, #10
 8001fec:	2201      	movs	r2, #1
 8001fee:	4918      	ldr	r1, [pc, #96]	; (8002050 <HAL_UART_RxCpltCallback+0x78>)
 8001ff0:	4818      	ldr	r0, [pc, #96]	; (8002054 <HAL_UART_RxCpltCallback+0x7c>)
 8001ff2:	f004 f888 	bl	8006106 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4915      	ldr	r1, [pc, #84]	; (8002050 <HAL_UART_RxCpltCallback+0x78>)
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <HAL_UART_RxCpltCallback+0x7c>)
 8001ffc:	f004 f915 	bl	800622a <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_UART_RxCpltCallback+0x80>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d11b      	bne.n	8002042 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_UART_RxCpltCallback+0x84>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b4f      	cmp	r3, #79	; 0x4f
 8002010:	d103      	bne.n	800201a <HAL_UART_RxCpltCallback+0x42>
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_UART_RxCpltCallback+0x88>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e00e      	b.n	8002038 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_UART_RxCpltCallback+0x84>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b61      	cmp	r3, #97	; 0x61
 8002020:	d103      	bne.n	800202a <HAL_UART_RxCpltCallback+0x52>
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_UART_RxCpltCallback+0x8c>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e006      	b.n	8002038 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_UART_RxCpltCallback+0x84>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b41      	cmp	r3, #65	; 0x41
 8002030:	d102      	bne.n	8002038 <HAL_UART_RxCpltCallback+0x60>
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_UART_RxCpltCallback+0x8c>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002038:	2201      	movs	r2, #1
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <HAL_UART_RxCpltCallback+0x84>)
 800203c:	480a      	ldr	r0, [pc, #40]	; (8002068 <HAL_UART_RxCpltCallback+0x90>)
 800203e:	f004 f8f4 	bl	800622a <HAL_UART_Receive_IT>
	}
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40011000 	.word	0x40011000
 8002050:	200000b0 	.word	0x200000b0
 8002054:	200003a0 	.word	0x200003a0
 8002058:	40004400 	.word	0x40004400
 800205c:	200000b1 	.word	0x200000b1
 8002060:	200000b2 	.word	0x200000b2
 8002064:	200000a0 	.word	0x200000a0
 8002068:	200003e4 	.word	0x200003e4

0800206c <uart_EspCheck>:

uint8_t uart_EspCheck(){
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <uart_EspCheck+0x1c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <uart_EspCheck+0x10>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <uart_EspCheck+0x12>
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	200000b2 	.word	0x200000b2

0800208c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_USART1_UART_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART1_UART_Init+0x4c>)
 80020c4:	f003 ffd2 	bl	800606c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ce:	f7ff fc11 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200003a0 	.word	0x200003a0
 80020dc:	40011000 	.word	0x40011000

080020e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_USART2_UART_Init+0x4c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <MX_USART2_UART_Init+0x50>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_USART2_UART_Init+0x4c>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_USART2_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_USART2_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_USART2_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_USART2_UART_Init+0x4c>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <MX_USART2_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_USART2_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_USART2_UART_Init+0x4c>)
 8002118:	f003 ffa8 	bl	800606c <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002122:	f7ff fbe7 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200003e4 	.word	0x200003e4
 8002130:	40004400 	.word	0x40004400

08002134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3a      	ldr	r2, [pc, #232]	; (800223c <HAL_UART_MspInit+0x108>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d135      	bne.n	80021c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_UART_MspInit+0x10c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a38      	ldr	r2, [pc, #224]	; (8002240 <HAL_UART_MspInit+0x10c>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_UART_MspInit+0x10c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_UART_MspInit+0x10c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_UART_MspInit+0x10c>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_UART_MspInit+0x10c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800218e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a0:	2307      	movs	r3, #7
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4826      	ldr	r0, [pc, #152]	; (8002244 <HAL_UART_MspInit+0x110>)
 80021ac:	f001 fa34 	bl	8003618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2025      	movs	r0, #37	; 0x25
 80021b6:	f000 fdf6 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ba:	2025      	movs	r0, #37	; 0x25
 80021bc:	f000 fe0f 	bl	8002dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021c0:	e038      	b.n	8002234 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_UART_MspInit+0x114>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d133      	bne.n	8002234 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6313      	str	r3, [r2, #48]	; 0x30
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_UART_MspInit+0x10c>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002204:	230c      	movs	r3, #12
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002214:	2307      	movs	r3, #7
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_UART_MspInit+0x110>)
 8002220:	f001 f9fa 	bl	8003618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2026      	movs	r0, #38	; 0x26
 800222a:	f000 fdbc 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800222e:	2026      	movs	r0, #38	; 0x26
 8002230:	f000 fdd5 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8002234:	bf00      	nop
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40011000 	.word	0x40011000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	40004400 	.word	0x40004400

0800224c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002276:	f7ff fcff 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f004 ff95 	bl	80071a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227e:	f7ff fa65 	bl	800174c <main>
  bx  lr    
 8002282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002290:	0800aa8c 	.word	0x0800aa8c
  ldr r2, =_sbss
 8002294:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002298:	2000043c 	.word	0x2000043c

0800229c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_Init+0x40>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_Init+0x40>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x40>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 fd61 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	200f      	movs	r0, #15
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fc20 	bl	8001b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fd79 	bl	8002dfa <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f000 fd41 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008
 800233c:	20000010 	.word	0x20000010
 8002340:	2000000c 	.word	0x2000000c

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010
 8002368:	20000428 	.word	0x20000428

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000428 	.word	0x20000428

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000010 	.word	0x20000010

080023cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e033      	b.n	800244a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f94e 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002412:	f023 0302 	bic.w	r3, r3, #2
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa68 	bl	80028f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
 800243a:	e001      	b.n	8002440 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Start_DMA+0x1e>
 800246e:	2302      	movs	r3, #2
 8002470:	e0e9      	b.n	8002646 <HAL_ADC_Start_DMA+0x1f2>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d018      	beq.n	80024ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_ADC_Start_DMA+0x1fc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6d      	ldr	r2, [pc, #436]	; (8002654 <HAL_ADC_Start_DMA+0x200>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9a      	lsrs	r2, r3, #18
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d107      	bne.n	80024da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 80a1 	bne.w	800262c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002528:	d106      	bne.n	8002538 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f023 0206 	bic.w	r2, r3, #6
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
 8002536:	e002      	b.n	800253e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_ADC_Start_DMA+0x204>)
 8002548:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4a43      	ldr	r2, [pc, #268]	; (800265c <HAL_ADC_Start_DMA+0x208>)
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_ADC_Start_DMA+0x20c>)
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_ADC_Start_DMA+0x210>)
 8002560:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800256a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800257a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	334c      	adds	r3, #76	; 0x4c
 8002596:	4619      	mov	r1, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f000 fce8 	bl	8002f70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12a      	bne.n	8002602 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <HAL_ADC_Start_DMA+0x214>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d015      	beq.n	80025e2 <HAL_ADC_Start_DMA+0x18e>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2c      	ldr	r2, [pc, #176]	; (800266c <HAL_ADC_Start_DMA+0x218>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d105      	bne.n	80025cc <HAL_ADC_Start_DMA+0x178>
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_ADC_Start_DMA+0x204>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_ADC_Start_DMA+0x21c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d136      	bne.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_ADC_Start_DMA+0x204>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d130      	bne.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d129      	bne.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e020      	b.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_ADC_Start_DMA+0x214>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d11b      	bne.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d114      	bne.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	e00b      	b.n	8002644 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0210 	orr.w	r2, r3, #16
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008
 8002654:	431bde83 	.word	0x431bde83
 8002658:	40012300 	.word	0x40012300
 800265c:	08002aed 	.word	0x08002aed
 8002660:	08002ba7 	.word	0x08002ba7
 8002664:	08002bc3 	.word	0x08002bc3
 8002668:	40012000 	.word	0x40012000
 800266c:	40012100 	.word	0x40012100
 8002670:	40012200 	.word	0x40012200

08002674 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1c>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e105      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x228>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b09      	cmp	r3, #9
 80026da:	d925      	bls.n	8002728 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68d9      	ldr	r1, [r3, #12]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	4603      	mov	r3, r0
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4403      	add	r3, r0
 800271a:	3b1e      	subs	r3, #30
 800271c:	409a      	lsls	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e022      	b.n	800276e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	2207      	movs	r2, #7
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d824      	bhi.n	80027c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	221f      	movs	r2, #31
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	400a      	ands	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3b05      	subs	r3, #5
 80027b2:	fa00 f203 	lsl.w	r2, r0, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
 80027be:	e04c      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b23      	subs	r3, #35	; 0x23
 80027da:	221f      	movs	r2, #31
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b23      	subs	r3, #35	; 0x23
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
 8002810:	e023      	b.n	800285a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	; 0x41
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b41      	subs	r3, #65	; 0x41
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_ADC_ConfigChannel+0x234>)
 800285c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d109      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b12      	cmp	r3, #18
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_ADC_ConfigChannel+0x238>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d123      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x1e6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d11b      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d111      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_ADC_ConfigChannel+0x23c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_ADC_ConfigChannel+0x240>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	0c9a      	lsrs	r2, r3, #18
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40012300 	.word	0x40012300
 80028e8:	40012000 	.word	0x40012000
 80028ec:	20000008 	.word	0x20000008
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fc:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <ADC_Init+0x1f0>)
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <ADC_Init+0x1f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d13c      	bne.n	8002b80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d12b      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d127      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d119      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0220 	bic.w	r2, r2, #32
 8002b52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fd7b 	bl	8002674 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b7e:	e00e      	b.n	8002b9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fd85 	bl	800269c <HAL_ADC_ErrorCallback>
}
 8002b92:	e004      	b.n	8002b9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fd67 	bl	8002688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fd5a 	bl	800269c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff29 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff3e 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5d 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff31 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa2 	bl	8002d4c <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff faa4 	bl	800236c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e099      	b.n	8002f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e50:	e00f      	b.n	8002e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e52:	f7ff fa8b 	bl	800236c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d908      	bls.n	8002e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e078      	b.n	8002f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e8      	bne.n	8002e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_DMA_Init+0x158>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d117      	bne.n	8002f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb01 	bl	8003520 <DMA_CheckFifoParam>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f32:	2301      	movs	r3, #1
 8002f34:	e016      	b.n	8002f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fab8 	bl	80034b4 <DMA_CalcBaseAndBitshift>
 8002f44:	4603      	mov	r3, r0
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4c:	223f      	movs	r2, #63	; 0x3f
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	f010803f 	.word	0xf010803f

08002f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_DMA_Start_IT+0x26>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e040      	b.n	8003018 <HAL_DMA_Start_IT+0xa8>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d12f      	bne.n	800300a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa4a 	bl	8003458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	223f      	movs	r2, #63	; 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0216 	orr.w	r2, r2, #22
 8002fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e005      	b.n	8003016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800302e:	f7ff f99d 	bl	800236c <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d008      	beq.n	8003052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e052      	b.n	80030f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0216 	bic.w	r2, r2, #22
 8003060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_DMA_Abort+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0208 	bic.w	r2, r2, #8
 8003090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a2:	e013      	b.n	80030cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a4:	f7ff f962 	bl	800236c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d90c      	bls.n	80030cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e015      	b.n	80030f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e4      	bne.n	80030a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	223f      	movs	r2, #63	; 0x3f
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d004      	beq.n	800311e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e00c      	b.n	8003138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2205      	movs	r2, #5
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003150:	4b92      	ldr	r3, [pc, #584]	; (800339c <HAL_DMA_IRQHandler+0x258>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a92      	ldr	r2, [pc, #584]	; (80033a0 <HAL_DMA_IRQHandler+0x25c>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	2208      	movs	r2, #8
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	2204      	movs	r2, #4
 80031ec:	409a      	lsls	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	2210      	movs	r2, #16
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d043      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03c      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2210      	movs	r2, #16
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d024      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e01f      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	e016      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2220      	movs	r2, #32
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 808e 	beq.w	80033e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8086 	beq.w	80033e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2220      	movs	r2, #32
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d136      	bne.n	800335c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0216 	bic.w	r2, r2, #22
 80032fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_DMA_IRQHandler+0x1da>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0208 	bic.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	223f      	movs	r2, #63	; 0x3f
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d07d      	beq.n	800344e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
        }
        return;
 800335a:	e078      	b.n	800344e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	2b00      	cmp	r3, #0
 800337e:	d030      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e02b      	b.n	80033e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e022      	b.n	80033e2 <HAL_DMA_IRQHandler+0x29e>
 800339c:	20000008 	.word	0x20000008
 80033a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0210 	bic.w	r2, r2, #16
 80033c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d032      	beq.n	8003450 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d022      	beq.n	800343c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2205      	movs	r2, #5
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	429a      	cmp	r2, r3
 8003418:	d307      	bcc.n	800342a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f2      	bne.n	800340e <HAL_DMA_IRQHandler+0x2ca>
 8003428:	e000      	b.n	800342c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800342a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e000      	b.n	8003450 <HAL_DMA_IRQHandler+0x30c>
        return;
 800344e:	bf00      	nop
    }
  }
}
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d108      	bne.n	8003498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003496:	e007      	b.n	80034a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3b10      	subs	r3, #16
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <DMA_CalcBaseAndBitshift+0x64>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <DMA_CalcBaseAndBitshift+0x68>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d909      	bls.n	80034f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	; 0x58
 80034f4:	e007      	b.n	8003506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	aaaaaaab 	.word	0xaaaaaaab
 800351c:	0800aa40 	.word	0x0800aa40

08003520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0x5a>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d856      	bhi.n	80035ee <DMA_CheckFifoParam+0xce>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <DMA_CheckFifoParam+0x28>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800356b 	.word	0x0800356b
 8003550:	08003559 	.word	0x08003559
 8003554:	080035ef 	.word	0x080035ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d046      	beq.n	80035f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e043      	b.n	80035f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003572:	d140      	bne.n	80035f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e03d      	b.n	80035f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	d121      	bne.n	80035c8 <DMA_CheckFifoParam+0xa8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d837      	bhi.n	80035fa <DMA_CheckFifoParam+0xda>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <DMA_CheckFifoParam+0x70>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a7 	.word	0x080035a7
 8003598:	080035a1 	.word	0x080035a1
 800359c:	080035b9 	.word	0x080035b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e030      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d025      	beq.n	80035fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e022      	b.n	80035fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035c6:	e01c      	b.n	8003602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d903      	bls.n	80035d6 <DMA_CheckFifoParam+0xb6>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d003      	beq.n	80035dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035d4:	e018      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      break;
 80035da:	e015      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e00b      	b.n	8003606 <DMA_CheckFifoParam+0xe6>
      break;
 80035ee:	bf00      	nop
 80035f0:	e00a      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e008      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e006      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;   
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
    }
  } 
  
  return status; 
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e16b      	b.n	800390c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 815a 	bne.w	8003906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	2b02      	cmp	r3, #2
 8003668:	d130      	bne.n	80036cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0201 	and.w	r2, r3, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d017      	beq.n	8003708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b4 	beq.w	8003906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b60      	ldr	r3, [pc, #384]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a5b      	ldr	r2, [pc, #364]	; (8003928 <HAL_GPIO_Init+0x310>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_GPIO_Init+0x314>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_GPIO_Init+0x226>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a51      	ldr	r2, [pc, #324]	; (8003930 <HAL_GPIO_Init+0x318>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x222>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a50      	ldr	r2, [pc, #320]	; (8003934 <HAL_GPIO_Init+0x31c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x21e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4f      	ldr	r2, [pc, #316]	; (8003938 <HAL_GPIO_Init+0x320>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x21a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_GPIO_Init+0x324>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x216>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4d      	ldr	r2, [pc, #308]	; (8003940 <HAL_GPIO_Init+0x328>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x212>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4c      	ldr	r2, [pc, #304]	; (8003944 <HAL_GPIO_Init+0x32c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x20e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_GPIO_Init+0x330>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x20a>
 800381e:	2307      	movs	r3, #7
 8003820:	e00e      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003822:	2308      	movs	r3, #8
 8003824:	e00c      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003826:	2306      	movs	r3, #6
 8003828:	e00a      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382a:	2305      	movs	r3, #5
 800382c:	e008      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382e:	2304      	movs	r3, #4
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003832:	2303      	movs	r3, #3
 8003834:	e004      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003836:	2302      	movs	r3, #2
 8003838:	e002      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383e:	2300      	movs	r3, #0
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f002 0203 	and.w	r2, r2, #3
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	4093      	lsls	r3, r2
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_GPIO_Init+0x310>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_GPIO_Init+0x334>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003882:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_GPIO_Init+0x334>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003888:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_GPIO_Init+0x334>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_GPIO_Init+0x334>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_GPIO_Init+0x334>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_GPIO_Init+0x334>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003900:	4a12      	ldr	r2, [pc, #72]	; (800394c <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	f67f ae90 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40013800 	.word	0x40013800
 800392c:	40020000 	.word	0x40020000
 8003930:	40020400 	.word	0x40020400
 8003934:	40020800 	.word	0x40020800
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40021000 	.word	0x40021000
 8003940:	40021400 	.word	0x40021400
 8003944:	40021800 	.word	0x40021800
 8003948:	40021c00 	.word	0x40021c00
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	041a      	lsls	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	43d9      	mvns	r1, r3
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	400b      	ands	r3, r1
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e12b      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd f9b8 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f000 fd5c 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a81      	ldr	r2, [pc, #516]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d807      	bhi.n	8003a3c <HAL_I2C_Init+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a80      	ldr	r2, [pc, #512]	; (8003c30 <HAL_I2C_Init+0x278>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e006      	b.n	8003a4a <HAL_I2C_Init+0x92>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a7d      	ldr	r2, [pc, #500]	; (8003c34 <HAL_I2C_Init+0x27c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0e7      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a78      	ldr	r2, [pc, #480]	; (8003c38 <HAL_I2C_Init+0x280>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0c9b      	lsrs	r3, r3, #18
 8003a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d802      	bhi.n	8003a8c <HAL_I2C_Init+0xd4>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	e009      	b.n	8003aa0 <HAL_I2C_Init+0xe8>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <HAL_I2C_Init+0x284>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	495c      	ldr	r1, [pc, #368]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003abc:	428b      	cmp	r3, r1
 8003abe:	d819      	bhi.n	8003af4 <HAL_I2C_Init+0x13c>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e59      	subs	r1, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_I2C_Init+0x138>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e59      	subs	r1, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aee:	e051      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e04f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d111      	bne.n	8003b20 <HAL_I2C_Init+0x168>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e012      	b.n	8003b46 <HAL_I2C_Init+0x18e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Init+0x196>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e022      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_I2C_Init+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e58      	subs	r0, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	440b      	add	r3, r1
 8003b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b72:	e00f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6809      	ldr	r1, [r1, #0]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6911      	ldr	r1, [r2, #16]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68d2      	ldr	r2, [r2, #12]
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	000186a0 	.word	0x000186a0
 8003c30:	001e847f 	.word	0x001e847f
 8003c34:	003d08ff 	.word	0x003d08ff
 8003c38:	431bde83 	.word	0x431bde83
 8003c3c:	10624dd3 	.word	0x10624dd3

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e264      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d075      	beq.n	8003d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5e:	4ba3      	ldr	r3, [pc, #652]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4ba0      	ldr	r3, [pc, #640]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b9d      	ldr	r3, [pc, #628]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b99      	ldr	r3, [pc, #612]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x108>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e23f      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x74>
 8003ca6:	4b91      	ldr	r3, [pc, #580]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a90      	ldr	r2, [pc, #576]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a8a      	ldr	r2, [pc, #552]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b88      	ldr	r3, [pc, #544]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a87      	ldr	r2, [pc, #540]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	4b84      	ldr	r3, [pc, #528]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a83      	ldr	r2, [pc, #524]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b81      	ldr	r3, [pc, #516]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a80      	ldr	r2, [pc, #512]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fb38 	bl	800236c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe fb34 	bl	800236c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e204      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xc0>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fb24 	bl	800236c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fb20 	bl	800236c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1f0      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0xe8>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1c4      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4952      	ldr	r1, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e03a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCC_OscConfig+0x2b0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fe fad9 	bl	800236c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fad5 	bl	800236c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a5      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	4b46      	ldr	r3, [pc, #280]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4940      	ldr	r1, [pc, #256]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_OscConfig+0x2b0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fab8 	bl	800236c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fe fab4 	bl	800236c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e184      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d030      	beq.n	8003e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <HAL_RCC_OscConfig+0x2b4>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe fa98 	bl	800236c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fe fa94 	bl	800236c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e164      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x200>
 8003e5e:	e015      	b.n	8003e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_OscConfig+0x2b4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fa81 	bl	800236c <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fa7d 	bl	800236c <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e14d      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a0 	beq.w	8003fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d121      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a07      	ldr	r2, [pc, #28]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fa43 	bl	800236c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee8:	e011      	b.n	8003f0e <HAL_RCC_OscConfig+0x2ce>
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	42470000 	.word	0x42470000
 8003ef4:	42470e80 	.word	0x42470e80
 8003ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efc:	f7fe fa36 	bl	800236c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e106      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCC_OscConfig+0x4e4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a80      	ldr	r2, [pc, #512]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	e01c      	b.n	8003f6a <HAL_RCC_OscConfig+0x32a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCC_OscConfig+0x312>
 8003f38:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a7a      	ldr	r2, [pc, #488]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	f043 0304 	orr.w	r3, r3, #4
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f50:	e00b      	b.n	8003f6a <HAL_RCC_OscConfig+0x32a>
 8003f52:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a74      	ldr	r2, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a71      	ldr	r2, [pc, #452]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d015      	beq.n	8003f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fe f9fb 	bl	800236c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe f9f7 	bl	800236c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0c5      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ee      	beq.n	8003f7a <HAL_RCC_OscConfig+0x33a>
 8003f9c:	e014      	b.n	8003fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe f9e5 	bl	800236c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fe f9e1 	bl	800236c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0af      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ee      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fce:	4b56      	ldr	r3, [pc, #344]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 809b 	beq.w	800411a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d05c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d141      	bne.n	800407c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fe f9b5 	bl	800236c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004006:	f7fe f9b1 	bl	800236c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e081      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	019b      	lsls	r3, r3, #6
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe f98a 	bl	800236c <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fe f986 	bl	800236c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e056      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x41c>
 800407a:	e04e      	b.n	800411a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe f973 	bl	800236c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe f96f 	bl	800236c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e03f      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x44a>
 80040a8:	e037      	b.n	800411a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e032      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d028      	beq.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d121      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d11a      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e6:	4013      	ands	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d107      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40007000 	.word	0x40007000
 8004128:	40023800 	.word	0x40023800
 800412c:	42470060 	.word	0x42470060

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fe f8a4 	bl	800236c <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fe f8a0 	bl	800236c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f804 	bl	80022e4 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800aa28 	.word	0x0800aa28
 80042f4:	20000008 	.word	0x20000008
 80042f8:	2000000c 	.word	0x2000000c

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	2300      	movs	r3, #0
 800430e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80bd 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e0b7      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004332:	60bb      	str	r3, [r7, #8]
       break;
 8004334:	e0b7      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004338:	60bb      	str	r3, [r7, #8]
      break;
 800433a:	e0b4      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b5d      	ldr	r3, [pc, #372]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004346:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04d      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	ea02 0800 	and.w	r8, r2, r0
 800436a:	ea03 0901 	and.w	r9, r3, r1
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	014b      	lsls	r3, r1, #5
 800437c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004380:	0142      	lsls	r2, r0, #5
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	ebb0 0008 	subs.w	r0, r0, r8
 800438a:	eb61 0109 	sbc.w	r1, r1, r9
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	018b      	lsls	r3, r1, #6
 8004398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439c:	0182      	lsls	r2, r0, #6
 800439e:	1a12      	subs	r2, r2, r0
 80043a0:	eb63 0301 	sbc.w	r3, r3, r1
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	00d9      	lsls	r1, r3, #3
 80043ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b2:	00d0      	lsls	r0, r2, #3
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	eb12 0208 	adds.w	r2, r2, r8
 80043bc:	eb43 0309 	adc.w	r3, r3, r9
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0259      	lsls	r1, r3, #9
 80043ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043ce:	0250      	lsls	r0, r2, #9
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f7fb ff4e 	bl	8000280 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e04a      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	ea02 0400 	and.w	r4, r2, r0
 8004406:	ea03 0501 	and.w	r5, r3, r1
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	014b      	lsls	r3, r1, #5
 8004418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800441c:	0142      	lsls	r2, r0, #5
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	1b00      	subs	r0, r0, r4
 8004424:	eb61 0105 	sbc.w	r1, r1, r5
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	018b      	lsls	r3, r1, #6
 8004432:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004436:	0182      	lsls	r2, r0, #6
 8004438:	1a12      	subs	r2, r2, r0
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	f04f 0000 	mov.w	r0, #0
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	00d9      	lsls	r1, r3, #3
 8004448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800444c:	00d0      	lsls	r0, r2, #3
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	1912      	adds	r2, r2, r4
 8004454:	eb45 0303 	adc.w	r3, r5, r3
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	0299      	lsls	r1, r3, #10
 8004462:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004466:	0290      	lsls	r0, r2, #10
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	f7fb ff02 	bl	8000280 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	3301      	adds	r3, #1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	60bb      	str	r3, [r7, #8]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044a2:	60bb      	str	r3, [r7, #8]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	68bb      	ldr	r3, [r7, #8]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000008 	.word	0x20000008

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800aa38 	.word	0x0800aa38

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0800aa38 	.word	0x0800aa38

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07b      	b.n	8004632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454a:	d009      	beq.n	8004560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	e005      	b.n	8004560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd fa84 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	ea42 0103 	orr.w	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	f003 0104 	and.w	r1, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0210 	and.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b088      	sub	sp, #32
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_SPI_Transmit+0x22>
 8004658:	2302      	movs	r3, #2
 800465a:	e126      	b.n	80048aa <HAL_SPI_Transmit+0x270>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004664:	f7fd fe82 	bl	800236c <HAL_GetTick>
 8004668:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d002      	beq.n	8004680 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800467e:	e10b      	b.n	8004898 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_SPI_Transmit+0x52>
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004690:	e102      	b.n	8004898 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d8:	d10f      	bne.n	80046fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d007      	beq.n	8004718 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	d14b      	bne.n	80047ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0xf6>
 800472a:	8afb      	ldrh	r3, [r7, #22]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d13e      	bne.n	80047ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004754:	e02b      	b.n	80047ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d112      	bne.n	800478a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	86da      	strh	r2, [r3, #54]	; 0x36
 8004788:	e011      	b.n	80047ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800478a:	f7fd fdef 	bl	800236c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d803      	bhi.n	80047a2 <HAL_SPI_Transmit+0x168>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d102      	bne.n	80047a8 <HAL_SPI_Transmit+0x16e>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047ac:	e074      	b.n	8004898 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ce      	bne.n	8004756 <HAL_SPI_Transmit+0x11c>
 80047b8:	e04c      	b.n	8004854 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x18e>
 80047c2:	8afb      	ldrh	r3, [r7, #22]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d140      	bne.n	800484a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047ee:	e02c      	b.n	800484a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d113      	bne.n	8004826 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	86da      	strh	r2, [r3, #54]	; 0x36
 8004824:	e011      	b.n	800484a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004826:	f7fd fda1 	bl	800236c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d803      	bhi.n	800483e <HAL_SPI_Transmit+0x204>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d102      	bne.n	8004844 <HAL_SPI_Transmit+0x20a>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004848:	e026      	b.n	8004898 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1cd      	bne.n	80047f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fbcb 	bl	8004ff4 <SPI_EndRxTxTransaction>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e000      	b.n	8004898 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b088      	sub	sp, #32
 80048b6:	af02      	add	r7, sp, #8
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ce:	d112      	bne.n	80048f6 <HAL_SPI_Receive+0x44>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10e      	bne.n	80048f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2204      	movs	r2, #4
 80048dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f8f1 	bl	8004ad4 <HAL_SPI_TransmitReceive>
 80048f2:	4603      	mov	r3, r0
 80048f4:	e0ea      	b.n	8004acc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_SPI_Receive+0x52>
 8004900:	2302      	movs	r3, #2
 8004902:	e0e3      	b.n	8004acc <HAL_SPI_Receive+0x21a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800490c:	f7fd fd2e 	bl	800236c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800491e:	2302      	movs	r3, #2
 8004920:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004922:	e0ca      	b.n	8004aba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_SPI_Receive+0x7e>
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004934:	e0c1      	b.n	8004aba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2204      	movs	r2, #4
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	d10f      	bne.n	800499e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800499c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d007      	beq.n	80049bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d162      	bne.n	8004a8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049c4:	e02e      	b.n	8004a24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d115      	bne.n	8004a00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f103 020c 	add.w	r2, r3, #12
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049fe:	e011      	b.n	8004a24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a00:	f7fd fcb4 	bl	800236c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d803      	bhi.n	8004a18 <HAL_SPI_Receive+0x166>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Receive+0x16c>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a22:	e04a      	b.n	8004aba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1cb      	bne.n	80049c6 <HAL_SPI_Receive+0x114>
 8004a2e:	e031      	b.n	8004a94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d113      	bne.n	8004a66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	1c9a      	adds	r2, r3, #2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a64:	e011      	b.n	8004a8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a66:	f7fd fc81 	bl	800236c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d803      	bhi.n	8004a7e <HAL_SPI_Receive+0x1cc>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d102      	bne.n	8004a84 <HAL_SPI_Receive+0x1d2>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a88:	e017      	b.n	8004aba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1cd      	bne.n	8004a30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fa45 	bl	8004f28 <SPI_EndRxTransaction>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
 8004ab6:	e000      	b.n	8004aba <HAL_SPI_Receive+0x208>
  }

error :
 8004ab8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08c      	sub	sp, #48	; 0x30
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x26>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e18a      	b.n	8004e10 <HAL_SPI_TransmitReceive+0x33c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b02:	f7fd fc33 	bl	800236c <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b18:	887b      	ldrh	r3, [r7, #2]
 8004b1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d00f      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x70>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d107      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x68>
 8004b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d003      	beq.n	8004b44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b42:	e15b      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x82>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x82>
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b5c:	e14e      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d003      	beq.n	8004b72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	887a      	ldrh	r2, [r7, #2]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	887a      	ldrh	r2, [r7, #2]
 8004b9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d007      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bce:	d178      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x10a>
 8004bd8:	8b7b      	ldrh	r3, [r7, #26]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d166      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	1c9a      	adds	r2, r3, #2
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c02:	e053      	b.n	8004cac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d11b      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x176>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d016      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x176>
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d113      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	881a      	ldrh	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d119      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x1b8>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d014      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	1c9a      	adds	r2, r3, #2
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c8c:	f7fd fb6e 	bl	800236c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d807      	bhi.n	8004cac <HAL_SPI_TransmitReceive+0x1d8>
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004caa:	e0a7      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1a6      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x130>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1a1      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x130>
 8004cc0:	e07c      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x1fc>
 8004cca:	8b7b      	ldrh	r3, [r7, #26]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d16b      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf6:	e057      	b.n	8004da8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d11c      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x26c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d017      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x26c>
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d114      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d119      	bne.n	8004d82 <HAL_SPI_TransmitReceive+0x2ae>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d014      	beq.n	8004d82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d82:	f7fd faf3 	bl	800236c <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d803      	bhi.n	8004d9a <HAL_SPI_TransmitReceive+0x2c6>
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_TransmitReceive+0x2cc>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004da6:	e029      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1a2      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x224>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d19d      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f917 	bl	8004ff4 <SPI_EndRxTxTransaction>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dd8:	e010      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	e000      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004dfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3730      	adds	r7, #48	; 0x30
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e28:	f7fd faa0 	bl	800236c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e38:	f7fd fa98 	bl	800236c <HAL_GetTick>
 8004e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	015b      	lsls	r3, r3, #5
 8004e44:	0d1b      	lsrs	r3, r3, #20
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4e:	e054      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d050      	beq.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e58:	f7fd fa88 	bl	800236c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d902      	bls.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d13d      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e86:	d111      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d004      	beq.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d107      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	d10f      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e017      	b.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d19b      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000008 	.word	0x20000008

08004f28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3c:	d111      	bne.n	8004f62 <SPI_EndRxTransaction+0x3a>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d004      	beq.n	8004f52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d107      	bne.n	8004f62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6a:	d12a      	bne.n	8004fc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d012      	beq.n	8004f9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ff49 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d02d      	beq.n	8004fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e026      	b.n	8004fea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff ff36 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01a      	beq.n	8004fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f043 0220 	orr.w	r2, r3, #32
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e013      	b.n	8004fea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2101      	movs	r1, #1
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff ff23 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e000      	b.n	8004fea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005000:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <SPI_EndRxTxTransaction+0x7c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <SPI_EndRxTxTransaction+0x80>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	0d5b      	lsrs	r3, r3, #21
 800500c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501e:	d112      	bne.n	8005046 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fef4 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e00f      	b.n	8005066 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3b01      	subs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d0f2      	beq.n	8005046 <SPI_EndRxTxTransaction+0x52>
 8005060:	e000      	b.n	8005064 <SPI_EndRxTxTransaction+0x70>
        break;
 8005062:	bf00      	nop
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000008 	.word	0x20000008
 8005074:	165e9f81 	.word	0x165e9f81

08005078 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e034      	b.n	80050f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7fb fce4 	bl	8000a70 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3308      	adds	r3, #8
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f001 ffa2 	bl	8006ffc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	461a      	mov	r2, r3
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	f001 ffec 	bl	80070a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6858      	ldr	r0, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	f002 f821 	bl	800711c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	f041 0101 	orr.w	r1, r1, #1
 80050f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fea2 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fc1a 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e046      	b.n	8005246 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_TIM_Base_Start+0xb4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d01d      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_TIM_Base_Start+0xb8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIM_Base_Start+0xbc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_Base_Start+0xc0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIM_Base_Start+0xc4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_TIM_Base_Start+0xc8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_TIM_Base_Start+0x70>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_TIM_Base_Start+0xcc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d111      	bne.n	8005234 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d010      	beq.n	8005244 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	e007      	b.n	8005244 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40001800 	.word	0x40001800

08005270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e04e      	b.n	8005326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a23      	ldr	r2, [pc, #140]	; (8005334 <HAL_TIM_Base_Start_IT+0xc4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d01d      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_TIM_Base_Start_IT+0xc8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_TIM_Base_Start_IT+0xcc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_TIM_Base_Start_IT+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_TIM_Base_Start_IT+0xd4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_TIM_Base_Start_IT+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d111      	bne.n	8005314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d010      	beq.n	8005324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	e007      	b.n	8005324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40010400 	.word	0x40010400
 8005348:	40014000 	.word	0x40014000
 800534c:	40001800 	.word	0x40001800

08005350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f839 	bl	80053ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 faf2 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d122      	bne.n	800545e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d11b      	bne.n	800545e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0202 	mvn.w	r2, #2
 800542e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa78 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 800544a:	e005      	b.n	8005458 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa6a 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa7b 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d122      	bne.n	80054b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d11b      	bne.n	80054b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0204 	mvn.w	r2, #4
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa4e 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 800549e:	e005      	b.n	80054ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa40 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa51 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d122      	bne.n	8005506 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0208 	mvn.w	r2, #8
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa24 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa16 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa27 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d122      	bne.n	800555a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d11b      	bne.n	800555a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0210 	mvn.w	r2, #16
 800552a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2208      	movs	r2, #8
 8005530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9fa 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 8005546:	e005      	b.n	8005554 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9ec 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9fd 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0201 	mvn.w	r2, #1
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fc fa21 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fd53 	bl	8006058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d10e      	bne.n	80055de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f9c2 	bl	8005962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0220 	mvn.w	r2, #32
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fd1d 	bl	8006044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800562e:	2302      	movs	r3, #2
 8005630:	e0ae      	b.n	8005790 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	f200 809f 	bhi.w	8005780 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800567d 	.word	0x0800567d
 800564c:	08005781 	.word	0x08005781
 8005650:	08005781 	.word	0x08005781
 8005654:	08005781 	.word	0x08005781
 8005658:	080056bd 	.word	0x080056bd
 800565c:	08005781 	.word	0x08005781
 8005660:	08005781 	.word	0x08005781
 8005664:	08005781 	.word	0x08005781
 8005668:	080056ff 	.word	0x080056ff
 800566c:	08005781 	.word	0x08005781
 8005670:	08005781 	.word	0x08005781
 8005674:	08005781 	.word	0x08005781
 8005678:	0800573f 	.word	0x0800573f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa18 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	619a      	str	r2, [r3, #24]
      break;
 80056ba:	e064      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fa68 	bl	8005b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	619a      	str	r2, [r3, #24]
      break;
 80056fc:	e043      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fabd 	bl	8005c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0208 	orr.w	r2, r2, #8
 8005718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0204 	bic.w	r2, r2, #4
 8005728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	61da      	str	r2, [r3, #28]
      break;
 800573c:	e023      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fb11 	bl	8005d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	021a      	lsls	r2, r3, #8
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	61da      	str	r2, [r3, #28]
      break;
 800577e:	e002      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
      break;
 8005784:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_ConfigClockSource+0x1c>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0b4      	b.n	800591e <HAL_TIM_ConfigClockSource+0x186>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ec:	d03e      	beq.n	800586c <HAL_TIM_ConfigClockSource+0xd4>
 80057ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f2:	f200 8087 	bhi.w	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fa:	f000 8086 	beq.w	800590a <HAL_TIM_ConfigClockSource+0x172>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d87f      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 8005804:	2b70      	cmp	r3, #112	; 0x70
 8005806:	d01a      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xa6>
 8005808:	2b70      	cmp	r3, #112	; 0x70
 800580a:	d87b      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b60      	cmp	r3, #96	; 0x60
 800580e:	d050      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005810:	2b60      	cmp	r3, #96	; 0x60
 8005812:	d877      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d03c      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0xfa>
 8005818:	2b50      	cmp	r3, #80	; 0x50
 800581a:	d873      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d058      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d86f      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d064      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005828:	2b30      	cmp	r3, #48	; 0x30
 800582a:	d86b      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d060      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d867      	bhi.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b10      	cmp	r3, #16
 800583a:	d05a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	e062      	b.n	8005904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6899      	ldr	r1, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f000 fb5d 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	609a      	str	r2, [r3, #8]
      break;
 800586a:	e04f      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6899      	ldr	r1, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f000 fb46 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588e:	609a      	str	r2, [r3, #8]
      break;
 8005890:	e03c      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 faba 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2150      	movs	r1, #80	; 0x50
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb13 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058b0:	e02c      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 fad9 	bl	8005e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2160      	movs	r1, #96	; 0x60
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb03 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058d0:	e01c      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 fa9a 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2140      	movs	r1, #64	; 0x40
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 faf3 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058f0:	e00c      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f000 faea 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 8005902:	e003      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	73fb      	strb	r3, [r7, #15]
      break;
 8005908:	e000      	b.n	800590c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800590a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a40      	ldr	r2, [pc, #256]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3c      	ldr	r2, [pc, #240]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d108      	bne.n	80059ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d027      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d023      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <TIM_Base_SetConfig+0x128>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <TIM_Base_SetConfig+0x130>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_Base_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <TIM_Base_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <TIM_Base_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	40001c00 	.word	0x40001c00
 8005ab4:	40002000 	.word	0x40002000

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <TIM_OC1_SetConfig+0xd8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC1_SetConfig+0x64>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <TIM_OC1_SetConfig+0xdc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10c      	bne.n	8005b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0308 	bic.w	r3, r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <TIM_OC1_SetConfig+0xd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC1_SetConfig+0x8e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <TIM_OC1_SetConfig+0xdc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d111      	bne.n	8005b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40010400 	.word	0x40010400

08005b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0320 	bic.w	r3, r3, #32
 8005be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <TIM_OC2_SetConfig+0xe4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC2_SetConfig+0x68>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <TIM_OC2_SetConfig+0xe8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10d      	bne.n	8005c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <TIM_OC2_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC2_SetConfig+0x94>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC2_SetConfig+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d113      	bne.n	8005c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <TIM_OC3_SetConfig+0xe0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_OC3_SetConfig+0x66>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <TIM_OC3_SetConfig+0xe4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10d      	bne.n	8005d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <TIM_OC3_SetConfig+0xe0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC3_SetConfig+0x92>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d113      	bne.n	8005d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40010400 	.word	0x40010400

08005d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <TIM_OC4_SetConfig+0xa4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x68>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <TIM_OC4_SetConfig+0xa8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40010400 	.word	0x40010400

08005e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 030a 	bic.w	r3, r3, #10
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f043 0307 	orr.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	021a      	lsls	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e05a      	b.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10c      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40001800 	.word	0x40001800

08006044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e03f      	b.n	80060fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc f84e 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fddb 	bl	8006c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b08a      	sub	sp, #40	; 0x28
 800610a:	af02      	add	r7, sp, #8
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	d17c      	bne.n	8006220 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_UART_Transmit+0x2c>
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e075      	b.n	8006222 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_UART_Transmit+0x3e>
 8006140:	2302      	movs	r3, #2
 8006142:	e06e      	b.n	8006222 <HAL_UART_Transmit+0x11c>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2221      	movs	r2, #33	; 0x21
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615a:	f7fc f907 	bl	800236c <HAL_GetTick>
 800615e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	88fa      	ldrh	r2, [r7, #6]
 800616a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	d108      	bne.n	8006188 <HAL_UART_Transmit+0x82>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e003      	b.n	8006190 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006198:	e02a      	b.n	80061f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fb1f 	bl	80067e8 <UART_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e036      	b.n	8006222 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	3302      	adds	r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e007      	b.n	80061e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1cf      	bne.n	800619a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	2140      	movs	r1, #64	; 0x40
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 faef 	bl	80067e8 <UART_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e006      	b.n	8006222 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	e000      	b.n	8006222 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	4613      	mov	r3, r2
 8006236:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b20      	cmp	r3, #32
 8006242:	d11d      	bne.n	8006280 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_UART_Receive_IT+0x26>
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e016      	b.n	8006282 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_UART_Receive_IT+0x38>
 800625e:	2302      	movs	r3, #2
 8006260:	e00f      	b.n	8006282 <HAL_UART_Receive_IT+0x58>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	461a      	mov	r2, r3
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fb24 	bl	80068c4 <UART_Start_Receive_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	e000      	b.n	8006282 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b0ba      	sub	sp, #232	; 0xe8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10f      	bne.n	80062f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_UART_IRQHandler+0x66>
 80062de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc03 	bl	8006af6 <UART_Receive_IT>
      return;
 80062f0:	e256      	b.n	80067a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80de 	beq.w	80064b8 <HAL_UART_IRQHandler+0x22c>
 80062fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80d1 	beq.w	80064b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_UART_IRQHandler+0xae>
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	f043 0201 	orr.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <HAL_UART_IRQHandler+0xd2>
 8006346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f043 0202 	orr.w	r2, r3, #2
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <HAL_UART_IRQHandler+0xf6>
 800636a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0204 	orr.w	r2, r3, #4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d011      	beq.n	80063b2 <HAL_UART_IRQHandler+0x126>
 800638e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0208 	orr.w	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 81ed 	beq.w	8006796 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_UART_IRQHandler+0x14e>
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fb8e 	bl	8006af6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <HAL_UART_IRQHandler+0x17a>
 80063fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04f      	beq.n	80064a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa96 	bl	8006938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d141      	bne.n	800649e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3314      	adds	r3, #20
 8006420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3314      	adds	r3, #20
 8006442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800644a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800645e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1d9      	bne.n	800641a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d013      	beq.n	8006496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	4a7d      	ldr	r2, [pc, #500]	; (8006668 <HAL_UART_IRQHandler+0x3dc>)
 8006474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	4618      	mov	r0, r3
 800647c:	f7fc fe40 	bl	8003100 <HAL_DMA_Abort_IT>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d016      	beq.n	80064b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	e00e      	b.n	80064b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f990 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649c:	e00a      	b.n	80064b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f98c 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e006      	b.n	80064b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f988 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064b2:	e170      	b.n	8006796 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	bf00      	nop
    return;
 80064b6:	e16e      	b.n	8006796 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	2b01      	cmp	r3, #1
 80064be:	f040 814a 	bne.w	8006756 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8143 	beq.w	8006756 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 813c 	beq.w	8006756 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	f040 80b4 	bne.w	800666c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8140 	beq.w	800679a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800651e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006522:	429a      	cmp	r2, r3
 8006524:	f080 8139 	bcs.w	800679a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800652e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800653a:	f000 8088 	beq.w	800664e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800655c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800656a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800656e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1d9      	bne.n	800653e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800659a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e1      	bne.n	800658a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e3      	bne.n	80065c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800661c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006630:	65ba      	str	r2, [r7, #88]	; 0x58
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800663e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e3      	bne.n	800660c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	4618      	mov	r0, r3
 800664a:	f7fc fce9 	bl	8003020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006656:	b29b      	uxth	r3, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	b29b      	uxth	r3, r3
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8b6 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006664:	e099      	b.n	800679a <HAL_UART_IRQHandler+0x50e>
 8006666:	bf00      	nop
 8006668:	080069ff 	.word	0x080069ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006674:	b29b      	uxth	r3, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 808b 	beq.w	800679e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8086 	beq.w	800679e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066b6:	647a      	str	r2, [r7, #68]	; 0x44
 80066b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e3      	bne.n	8006692 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3314      	adds	r3, #20
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	623b      	str	r3, [r7, #32]
   return(result);
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066ee:	633a      	str	r2, [r7, #48]	; 0x30
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e3      	bne.n	80066ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006734:	61fa      	str	r2, [r7, #28]
 8006736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	617b      	str	r3, [r7, #20]
   return(result);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e3      	bne.n	8006710 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f83e 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006754:	e023      	b.n	800679e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_UART_IRQHandler+0x4ea>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f959 	bl	8006a26 <UART_Transmit_IT>
    return;
 8006774:	e014      	b.n	80067a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <HAL_UART_IRQHandler+0x514>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f999 	bl	8006ac6 <UART_EndTransmit_IT>
    return;
 8006794:	e004      	b.n	80067a0 <HAL_UART_IRQHandler+0x514>
    return;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <HAL_UART_IRQHandler+0x514>
      return;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <HAL_UART_IRQHandler+0x514>
      return;
 800679e:	bf00      	nop
  }
}
 80067a0:	37e8      	adds	r7, #232	; 0xe8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop

080067a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b090      	sub	sp, #64	; 0x40
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f8:	e050      	b.n	800689c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d04c      	beq.n	800689c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <UART_WaitOnFlagUntilTimeout+0x30>
 8006808:	f7fb fdb0 	bl	800236c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006814:	429a      	cmp	r2, r3
 8006816:	d241      	bcs.n	800689c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006838:	637a      	str	r2, [r7, #52]	; 0x34
 800683a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800683e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3314      	adds	r3, #20
 8006852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	613b      	str	r3, [r7, #16]
   return(result);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	63bb      	str	r3, [r7, #56]	; 0x38
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686c:	623a      	str	r2, [r7, #32]
 800686e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	61bb      	str	r3, [r7, #24]
   return(result);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e00f      	b.n	80068bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	4013      	ands	r3, r2
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	bf0c      	ite	eq
 80068ac:	2301      	moveq	r3, #1
 80068ae:	2300      	movne	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	461a      	mov	r2, r3
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d09f      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3740      	adds	r7, #64	; 0x40
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	88fa      	ldrh	r2, [r7, #6]
 80068e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2222      	movs	r2, #34	; 0x22
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006908:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0220 	orr.w	r2, r2, #32
 8006928:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b095      	sub	sp, #84	; 0x54
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006960:	643a      	str	r2, [r7, #64]	; 0x40
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3314      	adds	r3, #20
 800697a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	61fb      	str	r3, [r7, #28]
   return(result);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006994:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800699a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d119      	bne.n	80069e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f023 0310 	bic.w	r3, r3, #16
 80069c6:	647b      	str	r3, [r7, #68]	; 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d0:	61ba      	str	r2, [r7, #24]
 80069d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6979      	ldr	r1, [r7, #20]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	613b      	str	r3, [r7, #16]
   return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069f2:	bf00      	nop
 80069f4:	3754      	adds	r7, #84	; 0x54
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fecf 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b21      	cmp	r3, #33	; 0x21
 8006a38:	d13e      	bne.n	8006ab8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a42:	d114      	bne.n	8006a6e <UART_Transmit_IT+0x48>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d110      	bne.n	8006a6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	1c9a      	adds	r2, r3, #2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	621a      	str	r2, [r3, #32]
 8006a6c:	e008      	b.n	8006a80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6211      	str	r1, [r2, #32]
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e000      	b.n	8006aba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ab8:	2302      	movs	r3, #2
  }
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006adc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fe5e 	bl	80067a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08c      	sub	sp, #48	; 0x30
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b22      	cmp	r3, #34	; 0x22
 8006b08:	f040 80ab 	bne.w	8006c62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d117      	bne.n	8006b46 <UART_Receive_IT+0x50>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d113      	bne.n	8006b46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	1c9a      	adds	r2, r3, #2
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	; 0x28
 8006b44:	e026      	b.n	8006b94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d007      	beq.n	8006b6a <UART_Receive_IT+0x74>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <UART_Receive_IT+0x82>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e008      	b.n	8006b8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d15a      	bne.n	8006c5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0220 	bic.w	r2, r2, #32
 8006bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d135      	bne.n	8006c54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0e:	623a      	str	r2, [r7, #32]
 8006c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	69f9      	ldr	r1, [r7, #28]
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d10a      	bne.n	8006c46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fdbf 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
 8006c52:	e002      	b.n	8006c5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fb f9bf 	bl	8001fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e002      	b.n	8006c64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2302      	movs	r3, #2
  }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3730      	adds	r7, #48	; 0x30
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	b09f      	sub	sp, #124	; 0x7c
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	68d9      	ldr	r1, [r3, #12]
 8006c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	ea40 0301 	orr.w	r3, r0, r1
 8006c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cb0:	f021 010c 	bic.w	r1, r1, #12
 8006cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	6999      	ldr	r1, [r3, #24]
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	ea40 0301 	orr.w	r3, r0, r1
 8006cd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4bc5      	ldr	r3, [pc, #788]	; (8006ff0 <UART_SetConfig+0x384>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d004      	beq.n	8006cea <UART_SetConfig+0x7e>
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4bc3      	ldr	r3, [pc, #780]	; (8006ff4 <UART_SetConfig+0x388>)
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d103      	bne.n	8006cf2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cea:	f7fd fc09 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8006cee:	6778      	str	r0, [r7, #116]	; 0x74
 8006cf0:	e002      	b.n	8006cf8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cf2:	f7fd fbf1 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8006cf6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d00:	f040 80b6 	bne.w	8006e70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d06:	461c      	mov	r4, r3
 8006d08:	f04f 0500 	mov.w	r5, #0
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	462b      	mov	r3, r5
 8006d10:	1891      	adds	r1, r2, r2
 8006d12:	6439      	str	r1, [r7, #64]	; 0x40
 8006d14:	415b      	adcs	r3, r3
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44
 8006d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d1c:	1912      	adds	r2, r2, r4
 8006d1e:	eb45 0303 	adc.w	r3, r5, r3
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f04f 0100 	mov.w	r1, #0
 8006d2a:	00d9      	lsls	r1, r3, #3
 8006d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d30:	00d0      	lsls	r0, r2, #3
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	1911      	adds	r1, r2, r4
 8006d38:	6639      	str	r1, [r7, #96]	; 0x60
 8006d3a:	416b      	adcs	r3, r5
 8006d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	1891      	adds	r1, r2, r2
 8006d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d4c:	415b      	adcs	r3, r3
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d58:	f7f9 fa92 	bl	8000280 <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4ba5      	ldr	r3, [pc, #660]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006d62:	fba3 2302 	umull	r2, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	011e      	lsls	r6, r3, #4
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	f04f 0500 	mov.w	r5, #0
 8006d72:	4622      	mov	r2, r4
 8006d74:	462b      	mov	r3, r5
 8006d76:	1891      	adds	r1, r2, r2
 8006d78:	6339      	str	r1, [r7, #48]	; 0x30
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d82:	1912      	adds	r2, r2, r4
 8006d84:	eb45 0303 	adc.w	r3, r5, r3
 8006d88:	f04f 0000 	mov.w	r0, #0
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	00d9      	lsls	r1, r3, #3
 8006d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d96:	00d0      	lsls	r0, r2, #3
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	1911      	adds	r1, r2, r4
 8006d9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006da0:	416b      	adcs	r3, r5
 8006da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	1891      	adds	r1, r2, r2
 8006db0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006db2:	415b      	adcs	r3, r3
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dbe:	f7f9 fa5f 	bl	8000280 <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4b8c      	ldr	r3, [pc, #560]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	2164      	movs	r1, #100	; 0x64
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	3332      	adds	r3, #50	; 0x32
 8006dda:	4a87      	ldr	r2, [pc, #540]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006de8:	441e      	add	r6, r3
 8006dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dec:	4618      	mov	r0, r3
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	1894      	adds	r4, r2, r2
 8006df8:	623c      	str	r4, [r7, #32]
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e02:	1812      	adds	r2, r2, r0
 8006e04:	eb41 0303 	adc.w	r3, r1, r3
 8006e08:	f04f 0400 	mov.w	r4, #0
 8006e0c:	f04f 0500 	mov.w	r5, #0
 8006e10:	00dd      	lsls	r5, r3, #3
 8006e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e16:	00d4      	lsls	r4, r2, #3
 8006e18:	4622      	mov	r2, r4
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	1814      	adds	r4, r2, r0
 8006e1e:	653c      	str	r4, [r7, #80]	; 0x50
 8006e20:	414b      	adcs	r3, r1
 8006e22:	657b      	str	r3, [r7, #84]	; 0x54
 8006e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	1891      	adds	r1, r2, r2
 8006e30:	61b9      	str	r1, [r7, #24]
 8006e32:	415b      	adcs	r3, r3
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e3e:	f7f9 fa1f 	bl	8000280 <__aeabi_uldivmod>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4b6c      	ldr	r3, [pc, #432]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006e48:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	2164      	movs	r1, #100	; 0x64
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	3332      	adds	r3, #50	; 0x32
 8006e5a:	4a67      	ldr	r2, [pc, #412]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	f003 0207 	and.w	r2, r3, #7
 8006e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4432      	add	r2, r6
 8006e6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e6e:	e0b9      	b.n	8006fe4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e72:	461c      	mov	r4, r3
 8006e74:	f04f 0500 	mov.w	r5, #0
 8006e78:	4622      	mov	r2, r4
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	6139      	str	r1, [r7, #16]
 8006e80:	415b      	adcs	r3, r3
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e88:	1912      	adds	r2, r2, r4
 8006e8a:	eb45 0303 	adc.w	r3, r5, r3
 8006e8e:	f04f 0000 	mov.w	r0, #0
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	00d9      	lsls	r1, r3, #3
 8006e98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e9c:	00d0      	lsls	r0, r2, #3
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	eb12 0804 	adds.w	r8, r2, r4
 8006ea6:	eb43 0905 	adc.w	r9, r3, r5
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	008b      	lsls	r3, r1, #2
 8006ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ec2:	0082      	lsls	r2, r0, #2
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	f7f9 f9da 	bl	8000280 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4b49      	ldr	r3, [pc, #292]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	011e      	lsls	r6, r3, #4
 8006eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006edc:	4618      	mov	r0, r3
 8006ede:	f04f 0100 	mov.w	r1, #0
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	1894      	adds	r4, r2, r2
 8006ee8:	60bc      	str	r4, [r7, #8]
 8006eea:	415b      	adcs	r3, r3
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ef2:	1812      	adds	r2, r2, r0
 8006ef4:	eb41 0303 	adc.w	r3, r1, r3
 8006ef8:	f04f 0400 	mov.w	r4, #0
 8006efc:	f04f 0500 	mov.w	r5, #0
 8006f00:	00dd      	lsls	r5, r3, #3
 8006f02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f06:	00d4      	lsls	r4, r2, #3
 8006f08:	4622      	mov	r2, r4
 8006f0a:	462b      	mov	r3, r5
 8006f0c:	1814      	adds	r4, r2, r0
 8006f0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f10:	414b      	adcs	r3, r1
 8006f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	008b      	lsls	r3, r1, #2
 8006f28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f2c:	0082      	lsls	r2, r0, #2
 8006f2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f32:	f7f9 f9a5 	bl	8000280 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	2164      	movs	r1, #100	; 0x64
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	3332      	adds	r3, #50	; 0x32
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f5a:	441e      	add	r6, r3
 8006f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	1894      	adds	r4, r2, r2
 8006f6a:	603c      	str	r4, [r7, #0]
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f74:	1812      	adds	r2, r2, r0
 8006f76:	eb41 0303 	adc.w	r3, r1, r3
 8006f7a:	f04f 0400 	mov.w	r4, #0
 8006f7e:	f04f 0500 	mov.w	r5, #0
 8006f82:	00dd      	lsls	r5, r3, #3
 8006f84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f88:	00d4      	lsls	r4, r2, #3
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	eb12 0a00 	adds.w	sl, r2, r0
 8006f92:	eb43 0b01 	adc.w	fp, r3, r1
 8006f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f04f 0100 	mov.w	r1, #0
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	008b      	lsls	r3, r1, #2
 8006faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fae:	0082      	lsls	r2, r0, #2
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	f7f9 f964 	bl	8000280 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2164      	movs	r1, #100	; 0x64
 8006fc6:	fb01 f303 	mul.w	r3, r1, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	; 0x32
 8006fd0:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <UART_SetConfig+0x38c>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4432      	add	r2, r6
 8006fe2:	609a      	str	r2, [r3, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	377c      	adds	r7, #124	; 0x7c
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	bf00      	nop
 8006ff0:	40011000 	.word	0x40011000
 8006ff4:	40011400 	.word	0x40011400
 8006ff8:	51eb851f 	.word	0x51eb851f

08006ffc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <FSMC_NORSRAM_Init+0xa0>)
 800701a:	4013      	ands	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007026:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800702c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007032:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007038:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800703e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007044:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800704a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007050:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007056:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800705c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007062:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007068:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d103      	bne.n	8007080 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68f9      	ldr	r1, [r7, #12]
 8007088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	fff00080 	.word	0xfff00080

080070a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070c2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070ce:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070d6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80070de:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070e8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	3b02      	subs	r3, #2
 80070f0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070f2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070f8:	4313      	orrs	r3, r2
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007134:	d122      	bne.n	800717c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007144:	4013      	ands	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007152:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800715a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007162:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007168:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6979      	ldr	r1, [r7, #20]
 8007176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800717a:	e005      	b.n	8007188 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	cff00000 	.word	0xcff00000

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000014 	.word	0x20000014

080071a8 <__libc_init_array>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4d0d      	ldr	r5, [pc, #52]	; (80071e0 <__libc_init_array+0x38>)
 80071ac:	4c0d      	ldr	r4, [pc, #52]	; (80071e4 <__libc_init_array+0x3c>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	2600      	movs	r6, #0
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	d109      	bne.n	80071cc <__libc_init_array+0x24>
 80071b8:	4d0b      	ldr	r5, [pc, #44]	; (80071e8 <__libc_init_array+0x40>)
 80071ba:	4c0c      	ldr	r4, [pc, #48]	; (80071ec <__libc_init_array+0x44>)
 80071bc:	f000 fc4e 	bl	8007a5c <_init>
 80071c0:	1b64      	subs	r4, r4, r5
 80071c2:	10a4      	asrs	r4, r4, #2
 80071c4:	2600      	movs	r6, #0
 80071c6:	42a6      	cmp	r6, r4
 80071c8:	d105      	bne.n	80071d6 <__libc_init_array+0x2e>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d0:	4798      	blx	r3
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7ee      	b.n	80071b4 <__libc_init_array+0xc>
 80071d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071da:	4798      	blx	r3
 80071dc:	3601      	adds	r6, #1
 80071de:	e7f2      	b.n	80071c6 <__libc_init_array+0x1e>
 80071e0:	0800aa84 	.word	0x0800aa84
 80071e4:	0800aa84 	.word	0x0800aa84
 80071e8:	0800aa84 	.word	0x0800aa84
 80071ec:	0800aa88 	.word	0x0800aa88

080071f0 <memset>:
 80071f0:	4402      	add	r2, r0
 80071f2:	4603      	mov	r3, r0
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d100      	bne.n	80071fa <memset+0xa>
 80071f8:	4770      	bx	lr
 80071fa:	f803 1b01 	strb.w	r1, [r3], #1
 80071fe:	e7f9      	b.n	80071f4 <memset+0x4>

08007200 <siprintf>:
 8007200:	b40e      	push	{r1, r2, r3}
 8007202:	b500      	push	{lr}
 8007204:	b09c      	sub	sp, #112	; 0x70
 8007206:	ab1d      	add	r3, sp, #116	; 0x74
 8007208:	9002      	str	r0, [sp, #8]
 800720a:	9006      	str	r0, [sp, #24]
 800720c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007210:	4809      	ldr	r0, [pc, #36]	; (8007238 <siprintf+0x38>)
 8007212:	9107      	str	r1, [sp, #28]
 8007214:	9104      	str	r1, [sp, #16]
 8007216:	4909      	ldr	r1, [pc, #36]	; (800723c <siprintf+0x3c>)
 8007218:	f853 2b04 	ldr.w	r2, [r3], #4
 800721c:	9105      	str	r1, [sp, #20]
 800721e:	6800      	ldr	r0, [r0, #0]
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	a902      	add	r1, sp, #8
 8007224:	f000 f868 	bl	80072f8 <_svfiprintf_r>
 8007228:	9b02      	ldr	r3, [sp, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	b01c      	add	sp, #112	; 0x70
 8007230:	f85d eb04 	ldr.w	lr, [sp], #4
 8007234:	b003      	add	sp, #12
 8007236:	4770      	bx	lr
 8007238:	20000014 	.word	0x20000014
 800723c:	ffff0208 	.word	0xffff0208

08007240 <__ssputs_r>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	688e      	ldr	r6, [r1, #8]
 8007246:	429e      	cmp	r6, r3
 8007248:	4682      	mov	sl, r0
 800724a:	460c      	mov	r4, r1
 800724c:	4690      	mov	r8, r2
 800724e:	461f      	mov	r7, r3
 8007250:	d838      	bhi.n	80072c4 <__ssputs_r+0x84>
 8007252:	898a      	ldrh	r2, [r1, #12]
 8007254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007258:	d032      	beq.n	80072c0 <__ssputs_r+0x80>
 800725a:	6825      	ldr	r5, [r4, #0]
 800725c:	6909      	ldr	r1, [r1, #16]
 800725e:	eba5 0901 	sub.w	r9, r5, r1
 8007262:	6965      	ldr	r5, [r4, #20]
 8007264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800726c:	3301      	adds	r3, #1
 800726e:	444b      	add	r3, r9
 8007270:	106d      	asrs	r5, r5, #1
 8007272:	429d      	cmp	r5, r3
 8007274:	bf38      	it	cc
 8007276:	461d      	movcc	r5, r3
 8007278:	0553      	lsls	r3, r2, #21
 800727a:	d531      	bpl.n	80072e0 <__ssputs_r+0xa0>
 800727c:	4629      	mov	r1, r5
 800727e:	f000 fb47 	bl	8007910 <_malloc_r>
 8007282:	4606      	mov	r6, r0
 8007284:	b950      	cbnz	r0, 800729c <__ssputs_r+0x5c>
 8007286:	230c      	movs	r3, #12
 8007288:	f8ca 3000 	str.w	r3, [sl]
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	6921      	ldr	r1, [r4, #16]
 800729e:	464a      	mov	r2, r9
 80072a0:	f000 fabe 	bl	8007820 <memcpy>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	6126      	str	r6, [r4, #16]
 80072b2:	6165      	str	r5, [r4, #20]
 80072b4:	444e      	add	r6, r9
 80072b6:	eba5 0509 	sub.w	r5, r5, r9
 80072ba:	6026      	str	r6, [r4, #0]
 80072bc:	60a5      	str	r5, [r4, #8]
 80072be:	463e      	mov	r6, r7
 80072c0:	42be      	cmp	r6, r7
 80072c2:	d900      	bls.n	80072c6 <__ssputs_r+0x86>
 80072c4:	463e      	mov	r6, r7
 80072c6:	4632      	mov	r2, r6
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	4641      	mov	r1, r8
 80072cc:	f000 fab6 	bl	800783c <memmove>
 80072d0:	68a3      	ldr	r3, [r4, #8]
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	1b9b      	subs	r3, r3, r6
 80072d6:	4432      	add	r2, r6
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	2000      	movs	r0, #0
 80072de:	e7db      	b.n	8007298 <__ssputs_r+0x58>
 80072e0:	462a      	mov	r2, r5
 80072e2:	f000 fb6f 	bl	80079c4 <_realloc_r>
 80072e6:	4606      	mov	r6, r0
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1e1      	bne.n	80072b0 <__ssputs_r+0x70>
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	4650      	mov	r0, sl
 80072f0:	f000 fabe 	bl	8007870 <_free_r>
 80072f4:	e7c7      	b.n	8007286 <__ssputs_r+0x46>
	...

080072f8 <_svfiprintf_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	4698      	mov	r8, r3
 80072fe:	898b      	ldrh	r3, [r1, #12]
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	b09d      	sub	sp, #116	; 0x74
 8007304:	4607      	mov	r7, r0
 8007306:	460d      	mov	r5, r1
 8007308:	4614      	mov	r4, r2
 800730a:	d50e      	bpl.n	800732a <_svfiprintf_r+0x32>
 800730c:	690b      	ldr	r3, [r1, #16]
 800730e:	b963      	cbnz	r3, 800732a <_svfiprintf_r+0x32>
 8007310:	2140      	movs	r1, #64	; 0x40
 8007312:	f000 fafd 	bl	8007910 <_malloc_r>
 8007316:	6028      	str	r0, [r5, #0]
 8007318:	6128      	str	r0, [r5, #16]
 800731a:	b920      	cbnz	r0, 8007326 <_svfiprintf_r+0x2e>
 800731c:	230c      	movs	r3, #12
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	e0d1      	b.n	80074ca <_svfiprintf_r+0x1d2>
 8007326:	2340      	movs	r3, #64	; 0x40
 8007328:	616b      	str	r3, [r5, #20]
 800732a:	2300      	movs	r3, #0
 800732c:	9309      	str	r3, [sp, #36]	; 0x24
 800732e:	2320      	movs	r3, #32
 8007330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007334:	f8cd 800c 	str.w	r8, [sp, #12]
 8007338:	2330      	movs	r3, #48	; 0x30
 800733a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074e4 <_svfiprintf_r+0x1ec>
 800733e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007342:	f04f 0901 	mov.w	r9, #1
 8007346:	4623      	mov	r3, r4
 8007348:	469a      	mov	sl, r3
 800734a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800734e:	b10a      	cbz	r2, 8007354 <_svfiprintf_r+0x5c>
 8007350:	2a25      	cmp	r2, #37	; 0x25
 8007352:	d1f9      	bne.n	8007348 <_svfiprintf_r+0x50>
 8007354:	ebba 0b04 	subs.w	fp, sl, r4
 8007358:	d00b      	beq.n	8007372 <_svfiprintf_r+0x7a>
 800735a:	465b      	mov	r3, fp
 800735c:	4622      	mov	r2, r4
 800735e:	4629      	mov	r1, r5
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff ff6d 	bl	8007240 <__ssputs_r>
 8007366:	3001      	adds	r0, #1
 8007368:	f000 80aa 	beq.w	80074c0 <_svfiprintf_r+0x1c8>
 800736c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800736e:	445a      	add	r2, fp
 8007370:	9209      	str	r2, [sp, #36]	; 0x24
 8007372:	f89a 3000 	ldrb.w	r3, [sl]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80a2 	beq.w	80074c0 <_svfiprintf_r+0x1c8>
 800737c:	2300      	movs	r3, #0
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007386:	f10a 0a01 	add.w	sl, sl, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	9307      	str	r3, [sp, #28]
 800738e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007392:	931a      	str	r3, [sp, #104]	; 0x68
 8007394:	4654      	mov	r4, sl
 8007396:	2205      	movs	r2, #5
 8007398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739c:	4851      	ldr	r0, [pc, #324]	; (80074e4 <_svfiprintf_r+0x1ec>)
 800739e:	f7f8 ff1f 	bl	80001e0 <memchr>
 80073a2:	9a04      	ldr	r2, [sp, #16]
 80073a4:	b9d8      	cbnz	r0, 80073de <_svfiprintf_r+0xe6>
 80073a6:	06d0      	lsls	r0, r2, #27
 80073a8:	bf44      	itt	mi
 80073aa:	2320      	movmi	r3, #32
 80073ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073b0:	0711      	lsls	r1, r2, #28
 80073b2:	bf44      	itt	mi
 80073b4:	232b      	movmi	r3, #43	; 0x2b
 80073b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073ba:	f89a 3000 	ldrb.w	r3, [sl]
 80073be:	2b2a      	cmp	r3, #42	; 0x2a
 80073c0:	d015      	beq.n	80073ee <_svfiprintf_r+0xf6>
 80073c2:	9a07      	ldr	r2, [sp, #28]
 80073c4:	4654      	mov	r4, sl
 80073c6:	2000      	movs	r0, #0
 80073c8:	f04f 0c0a 	mov.w	ip, #10
 80073cc:	4621      	mov	r1, r4
 80073ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073d2:	3b30      	subs	r3, #48	; 0x30
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d94e      	bls.n	8007476 <_svfiprintf_r+0x17e>
 80073d8:	b1b0      	cbz	r0, 8007408 <_svfiprintf_r+0x110>
 80073da:	9207      	str	r2, [sp, #28]
 80073dc:	e014      	b.n	8007408 <_svfiprintf_r+0x110>
 80073de:	eba0 0308 	sub.w	r3, r0, r8
 80073e2:	fa09 f303 	lsl.w	r3, r9, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	46a2      	mov	sl, r4
 80073ec:	e7d2      	b.n	8007394 <_svfiprintf_r+0x9c>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	9103      	str	r1, [sp, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfbb      	ittet	lt
 80073fa:	425b      	neglt	r3, r3
 80073fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007400:	9307      	strge	r3, [sp, #28]
 8007402:	9307      	strlt	r3, [sp, #28]
 8007404:	bfb8      	it	lt
 8007406:	9204      	strlt	r2, [sp, #16]
 8007408:	7823      	ldrb	r3, [r4, #0]
 800740a:	2b2e      	cmp	r3, #46	; 0x2e
 800740c:	d10c      	bne.n	8007428 <_svfiprintf_r+0x130>
 800740e:	7863      	ldrb	r3, [r4, #1]
 8007410:	2b2a      	cmp	r3, #42	; 0x2a
 8007412:	d135      	bne.n	8007480 <_svfiprintf_r+0x188>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	1d1a      	adds	r2, r3, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfb8      	it	lt
 8007420:	f04f 33ff 	movlt.w	r3, #4294967295
 8007424:	3402      	adds	r4, #2
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074f4 <_svfiprintf_r+0x1fc>
 800742c:	7821      	ldrb	r1, [r4, #0]
 800742e:	2203      	movs	r2, #3
 8007430:	4650      	mov	r0, sl
 8007432:	f7f8 fed5 	bl	80001e0 <memchr>
 8007436:	b140      	cbz	r0, 800744a <_svfiprintf_r+0x152>
 8007438:	2340      	movs	r3, #64	; 0x40
 800743a:	eba0 000a 	sub.w	r0, r0, sl
 800743e:	fa03 f000 	lsl.w	r0, r3, r0
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	4303      	orrs	r3, r0
 8007446:	3401      	adds	r4, #1
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744e:	4826      	ldr	r0, [pc, #152]	; (80074e8 <_svfiprintf_r+0x1f0>)
 8007450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007454:	2206      	movs	r2, #6
 8007456:	f7f8 fec3 	bl	80001e0 <memchr>
 800745a:	2800      	cmp	r0, #0
 800745c:	d038      	beq.n	80074d0 <_svfiprintf_r+0x1d8>
 800745e:	4b23      	ldr	r3, [pc, #140]	; (80074ec <_svfiprintf_r+0x1f4>)
 8007460:	bb1b      	cbnz	r3, 80074aa <_svfiprintf_r+0x1b2>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	3307      	adds	r3, #7
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	3308      	adds	r3, #8
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	4433      	add	r3, r6
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	e767      	b.n	8007346 <_svfiprintf_r+0x4e>
 8007476:	fb0c 3202 	mla	r2, ip, r2, r3
 800747a:	460c      	mov	r4, r1
 800747c:	2001      	movs	r0, #1
 800747e:	e7a5      	b.n	80073cc <_svfiprintf_r+0xd4>
 8007480:	2300      	movs	r3, #0
 8007482:	3401      	adds	r4, #1
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	4619      	mov	r1, r3
 8007488:	f04f 0c0a 	mov.w	ip, #10
 800748c:	4620      	mov	r0, r4
 800748e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007492:	3a30      	subs	r2, #48	; 0x30
 8007494:	2a09      	cmp	r2, #9
 8007496:	d903      	bls.n	80074a0 <_svfiprintf_r+0x1a8>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0c5      	beq.n	8007428 <_svfiprintf_r+0x130>
 800749c:	9105      	str	r1, [sp, #20]
 800749e:	e7c3      	b.n	8007428 <_svfiprintf_r+0x130>
 80074a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074a4:	4604      	mov	r4, r0
 80074a6:	2301      	movs	r3, #1
 80074a8:	e7f0      	b.n	800748c <_svfiprintf_r+0x194>
 80074aa:	ab03      	add	r3, sp, #12
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	462a      	mov	r2, r5
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <_svfiprintf_r+0x1f8>)
 80074b2:	a904      	add	r1, sp, #16
 80074b4:	4638      	mov	r0, r7
 80074b6:	f3af 8000 	nop.w
 80074ba:	1c42      	adds	r2, r0, #1
 80074bc:	4606      	mov	r6, r0
 80074be:	d1d6      	bne.n	800746e <_svfiprintf_r+0x176>
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	065b      	lsls	r3, r3, #25
 80074c4:	f53f af2c 	bmi.w	8007320 <_svfiprintf_r+0x28>
 80074c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ca:	b01d      	add	sp, #116	; 0x74
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d0:	ab03      	add	r3, sp, #12
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	462a      	mov	r2, r5
 80074d6:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <_svfiprintf_r+0x1f8>)
 80074d8:	a904      	add	r1, sp, #16
 80074da:	4638      	mov	r0, r7
 80074dc:	f000 f87a 	bl	80075d4 <_printf_i>
 80074e0:	e7eb      	b.n	80074ba <_svfiprintf_r+0x1c2>
 80074e2:	bf00      	nop
 80074e4:	0800aa48 	.word	0x0800aa48
 80074e8:	0800aa52 	.word	0x0800aa52
 80074ec:	00000000 	.word	0x00000000
 80074f0:	08007241 	.word	0x08007241
 80074f4:	0800aa4e 	.word	0x0800aa4e

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4699      	mov	r9, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfb8      	it	lt
 800750c:	4613      	movlt	r3, r2
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc26      	bgt.n	800758e <_printf_common+0x96>
 8007540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007544:	1e13      	subs	r3, r2, #0
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d42b      	bmi.n	80075a8 <_printf_common+0xb0>
 8007550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007554:	4649      	mov	r1, r9
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	3001      	adds	r0, #1
 800755c:	d01e      	beq.n	800759c <_printf_common+0xa4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	68e5      	ldr	r5, [r4, #12]
 8007562:	6832      	ldr	r2, [r6, #0]
 8007564:	f003 0306 	and.w	r3, r3, #6
 8007568:	2b04      	cmp	r3, #4
 800756a:	bf08      	it	eq
 800756c:	1aad      	subeq	r5, r5, r2
 800756e:	68a3      	ldr	r3, [r4, #8]
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	2600      	movs	r6, #0
 8007584:	341a      	adds	r4, #26
 8007586:	42b5      	cmp	r5, r6
 8007588:	d11a      	bne.n	80075c0 <_printf_common+0xc8>
 800758a:	2000      	movs	r0, #0
 800758c:	e008      	b.n	80075a0 <_printf_common+0xa8>
 800758e:	2301      	movs	r3, #1
 8007590:	4652      	mov	r2, sl
 8007592:	4649      	mov	r1, r9
 8007594:	4638      	mov	r0, r7
 8007596:	47c0      	blx	r8
 8007598:	3001      	adds	r0, #1
 800759a:	d103      	bne.n	80075a4 <_printf_common+0xac>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7c6      	b.n	8007536 <_printf_common+0x3e>
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	2030      	movs	r0, #48	; 0x30
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b2:	4422      	add	r2, r4
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075bc:	3302      	adds	r3, #2
 80075be:	e7c7      	b.n	8007550 <_printf_common+0x58>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4649      	mov	r1, r9
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0e6      	beq.n	800759c <_printf_common+0xa4>
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7d9      	b.n	8007586 <_printf_common+0x8e>
	...

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	4691      	mov	r9, r2
 80075dc:	7e27      	ldrb	r7, [r4, #24]
 80075de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075e0:	2f78      	cmp	r7, #120	; 0x78
 80075e2:	4680      	mov	r8, r0
 80075e4:	469a      	mov	sl, r3
 80075e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	; 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d8 	beq.w	80077a6 <_printf_i+0x1d2>
 80075f6:	2f58      	cmp	r7, #88	; 0x58
 80075f8:	f000 80a3 	beq.w	8007742 <_printf_i+0x16e>
 80075fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a001      	add	r0, pc, #4	; (adr r0, 8007614 <_printf_i+0x40>)
 8007610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	0800778d 	.word	0x0800778d
 8007644:	080076b1 	.word	0x080076b1
 8007648:	0800776f 	.word	0x0800776f
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077af 	.word	0x080077af
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076b1 	.word	0x080076b1
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007777 	.word	0x08007777
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	600a      	str	r2, [r1, #0]
 8007674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e0a3      	b.n	80077c8 <_printf_i+0x1f4>
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	6808      	ldr	r0, [r1, #0]
 8007684:	062e      	lsls	r6, r5, #24
 8007686:	f100 0304 	add.w	r3, r0, #4
 800768a:	d50a      	bpl.n	80076a2 <_printf_i+0xce>
 800768c:	6805      	ldr	r5, [r0, #0]
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	2d00      	cmp	r5, #0
 8007692:	da03      	bge.n	800769c <_printf_i+0xc8>
 8007694:	232d      	movs	r3, #45	; 0x2d
 8007696:	426d      	negs	r5, r5
 8007698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769c:	485e      	ldr	r0, [pc, #376]	; (8007818 <_printf_i+0x244>)
 800769e:	230a      	movs	r3, #10
 80076a0:	e019      	b.n	80076d6 <_printf_i+0x102>
 80076a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076a6:	6805      	ldr	r5, [r0, #0]
 80076a8:	600b      	str	r3, [r1, #0]
 80076aa:	bf18      	it	ne
 80076ac:	b22d      	sxthne	r5, r5
 80076ae:	e7ef      	b.n	8007690 <_printf_i+0xbc>
 80076b0:	680b      	ldr	r3, [r1, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	1d18      	adds	r0, r3, #4
 80076b6:	6008      	str	r0, [r1, #0]
 80076b8:	0628      	lsls	r0, r5, #24
 80076ba:	d501      	bpl.n	80076c0 <_printf_i+0xec>
 80076bc:	681d      	ldr	r5, [r3, #0]
 80076be:	e002      	b.n	80076c6 <_printf_i+0xf2>
 80076c0:	0669      	lsls	r1, r5, #25
 80076c2:	d5fb      	bpl.n	80076bc <_printf_i+0xe8>
 80076c4:	881d      	ldrh	r5, [r3, #0]
 80076c6:	4854      	ldr	r0, [pc, #336]	; (8007818 <_printf_i+0x244>)
 80076c8:	2f6f      	cmp	r7, #111	; 0x6f
 80076ca:	bf0c      	ite	eq
 80076cc:	2308      	moveq	r3, #8
 80076ce:	230a      	movne	r3, #10
 80076d0:	2100      	movs	r1, #0
 80076d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d6:	6866      	ldr	r6, [r4, #4]
 80076d8:	60a6      	str	r6, [r4, #8]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	bfa2      	ittt	ge
 80076de:	6821      	ldrge	r1, [r4, #0]
 80076e0:	f021 0104 	bicge.w	r1, r1, #4
 80076e4:	6021      	strge	r1, [r4, #0]
 80076e6:	b90d      	cbnz	r5, 80076ec <_printf_i+0x118>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	d04d      	beq.n	8007788 <_printf_i+0x1b4>
 80076ec:	4616      	mov	r6, r2
 80076ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80076f2:	fb03 5711 	mls	r7, r3, r1, r5
 80076f6:	5dc7      	ldrb	r7, [r0, r7]
 80076f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076fc:	462f      	mov	r7, r5
 80076fe:	42bb      	cmp	r3, r7
 8007700:	460d      	mov	r5, r1
 8007702:	d9f4      	bls.n	80076ee <_printf_i+0x11a>
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10b      	bne.n	8007720 <_printf_i+0x14c>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07df      	lsls	r7, r3, #31
 800770c:	d508      	bpl.n	8007720 <_printf_i+0x14c>
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	4299      	cmp	r1, r3
 8007714:	bfde      	ittt	le
 8007716:	2330      	movle	r3, #48	; 0x30
 8007718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800771c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007720:	1b92      	subs	r2, r2, r6
 8007722:	6122      	str	r2, [r4, #16]
 8007724:	f8cd a000 	str.w	sl, [sp]
 8007728:	464b      	mov	r3, r9
 800772a:	aa03      	add	r2, sp, #12
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fee2 	bl	80074f8 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	d14c      	bne.n	80077d2 <_printf_i+0x1fe>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b004      	add	sp, #16
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007742:	4835      	ldr	r0, [pc, #212]	; (8007818 <_printf_i+0x244>)
 8007744:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	680e      	ldr	r6, [r1, #0]
 800774c:	061f      	lsls	r7, r3, #24
 800774e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007752:	600e      	str	r6, [r1, #0]
 8007754:	d514      	bpl.n	8007780 <_printf_i+0x1ac>
 8007756:	07d9      	lsls	r1, r3, #31
 8007758:	bf44      	itt	mi
 800775a:	f043 0320 	orrmi.w	r3, r3, #32
 800775e:	6023      	strmi	r3, [r4, #0]
 8007760:	b91d      	cbnz	r5, 800776a <_printf_i+0x196>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2310      	movs	r3, #16
 800776c:	e7b0      	b.n	80076d0 <_printf_i+0xfc>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	2378      	movs	r3, #120	; 0x78
 8007778:	4828      	ldr	r0, [pc, #160]	; (800781c <_printf_i+0x248>)
 800777a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800777e:	e7e3      	b.n	8007748 <_printf_i+0x174>
 8007780:	065e      	lsls	r6, r3, #25
 8007782:	bf48      	it	mi
 8007784:	b2ad      	uxthmi	r5, r5
 8007786:	e7e6      	b.n	8007756 <_printf_i+0x182>
 8007788:	4616      	mov	r6, r2
 800778a:	e7bb      	b.n	8007704 <_printf_i+0x130>
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	6826      	ldr	r6, [r4, #0]
 8007790:	6960      	ldr	r0, [r4, #20]
 8007792:	1d1d      	adds	r5, r3, #4
 8007794:	600d      	str	r5, [r1, #0]
 8007796:	0635      	lsls	r5, r6, #24
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0x1cc>
 800779c:	6018      	str	r0, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0x1d2>
 80077a0:	0671      	lsls	r1, r6, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0x1c8>
 80077a4:	8018      	strh	r0, [r3, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	4616      	mov	r6, r2
 80077ac:	e7ba      	b.n	8007724 <_printf_i+0x150>
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	600a      	str	r2, [r1, #0]
 80077b4:	681e      	ldr	r6, [r3, #0]
 80077b6:	6862      	ldr	r2, [r4, #4]
 80077b8:	2100      	movs	r1, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7f8 fd10 	bl	80001e0 <memchr>
 80077c0:	b108      	cbz	r0, 80077c6 <_printf_i+0x1f2>
 80077c2:	1b80      	subs	r0, r0, r6
 80077c4:	6060      	str	r0, [r4, #4]
 80077c6:	6863      	ldr	r3, [r4, #4]
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	2300      	movs	r3, #0
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	e7a8      	b.n	8007724 <_printf_i+0x150>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	4632      	mov	r2, r6
 80077d6:	4649      	mov	r1, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	47d0      	blx	sl
 80077dc:	3001      	adds	r0, #1
 80077de:	d0ab      	beq.n	8007738 <_printf_i+0x164>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	079b      	lsls	r3, r3, #30
 80077e4:	d413      	bmi.n	800780e <_printf_i+0x23a>
 80077e6:	68e0      	ldr	r0, [r4, #12]
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	4298      	cmp	r0, r3
 80077ec:	bfb8      	it	lt
 80077ee:	4618      	movlt	r0, r3
 80077f0:	e7a4      	b.n	800773c <_printf_i+0x168>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4632      	mov	r2, r6
 80077f6:	4649      	mov	r1, r9
 80077f8:	4640      	mov	r0, r8
 80077fa:	47d0      	blx	sl
 80077fc:	3001      	adds	r0, #1
 80077fe:	d09b      	beq.n	8007738 <_printf_i+0x164>
 8007800:	3501      	adds	r5, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	9903      	ldr	r1, [sp, #12]
 8007806:	1a5b      	subs	r3, r3, r1
 8007808:	42ab      	cmp	r3, r5
 800780a:	dcf2      	bgt.n	80077f2 <_printf_i+0x21e>
 800780c:	e7eb      	b.n	80077e6 <_printf_i+0x212>
 800780e:	2500      	movs	r5, #0
 8007810:	f104 0619 	add.w	r6, r4, #25
 8007814:	e7f5      	b.n	8007802 <_printf_i+0x22e>
 8007816:	bf00      	nop
 8007818:	0800aa59 	.word	0x0800aa59
 800781c:	0800aa6a 	.word	0x0800aa6a

08007820 <memcpy>:
 8007820:	440a      	add	r2, r1
 8007822:	4291      	cmp	r1, r2
 8007824:	f100 33ff 	add.w	r3, r0, #4294967295
 8007828:	d100      	bne.n	800782c <memcpy+0xc>
 800782a:	4770      	bx	lr
 800782c:	b510      	push	{r4, lr}
 800782e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007836:	4291      	cmp	r1, r2
 8007838:	d1f9      	bne.n	800782e <memcpy+0xe>
 800783a:	bd10      	pop	{r4, pc}

0800783c <memmove>:
 800783c:	4288      	cmp	r0, r1
 800783e:	b510      	push	{r4, lr}
 8007840:	eb01 0402 	add.w	r4, r1, r2
 8007844:	d902      	bls.n	800784c <memmove+0x10>
 8007846:	4284      	cmp	r4, r0
 8007848:	4623      	mov	r3, r4
 800784a:	d807      	bhi.n	800785c <memmove+0x20>
 800784c:	1e43      	subs	r3, r0, #1
 800784e:	42a1      	cmp	r1, r4
 8007850:	d008      	beq.n	8007864 <memmove+0x28>
 8007852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800785a:	e7f8      	b.n	800784e <memmove+0x12>
 800785c:	4402      	add	r2, r0
 800785e:	4601      	mov	r1, r0
 8007860:	428a      	cmp	r2, r1
 8007862:	d100      	bne.n	8007866 <memmove+0x2a>
 8007864:	bd10      	pop	{r4, pc}
 8007866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800786a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800786e:	e7f7      	b.n	8007860 <memmove+0x24>

08007870 <_free_r>:
 8007870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007872:	2900      	cmp	r1, #0
 8007874:	d048      	beq.n	8007908 <_free_r+0x98>
 8007876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787a:	9001      	str	r0, [sp, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f1a1 0404 	sub.w	r4, r1, #4
 8007882:	bfb8      	it	lt
 8007884:	18e4      	addlt	r4, r4, r3
 8007886:	f000 f8d3 	bl	8007a30 <__malloc_lock>
 800788a:	4a20      	ldr	r2, [pc, #128]	; (800790c <_free_r+0x9c>)
 800788c:	9801      	ldr	r0, [sp, #4]
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	4615      	mov	r5, r2
 8007892:	b933      	cbnz	r3, 80078a2 <_free_r+0x32>
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	6014      	str	r4, [r2, #0]
 8007898:	b003      	add	sp, #12
 800789a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800789e:	f000 b8cd 	b.w	8007a3c <__malloc_unlock>
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	d90b      	bls.n	80078be <_free_r+0x4e>
 80078a6:	6821      	ldr	r1, [r4, #0]
 80078a8:	1862      	adds	r2, r4, r1
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bf04      	itt	eq
 80078ae:	681a      	ldreq	r2, [r3, #0]
 80078b0:	685b      	ldreq	r3, [r3, #4]
 80078b2:	6063      	str	r3, [r4, #4]
 80078b4:	bf04      	itt	eq
 80078b6:	1852      	addeq	r2, r2, r1
 80078b8:	6022      	streq	r2, [r4, #0]
 80078ba:	602c      	str	r4, [r5, #0]
 80078bc:	e7ec      	b.n	8007898 <_free_r+0x28>
 80078be:	461a      	mov	r2, r3
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	b10b      	cbz	r3, 80078c8 <_free_r+0x58>
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d9fa      	bls.n	80078be <_free_r+0x4e>
 80078c8:	6811      	ldr	r1, [r2, #0]
 80078ca:	1855      	adds	r5, r2, r1
 80078cc:	42a5      	cmp	r5, r4
 80078ce:	d10b      	bne.n	80078e8 <_free_r+0x78>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	4421      	add	r1, r4
 80078d4:	1854      	adds	r4, r2, r1
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	d1dd      	bne.n	8007898 <_free_r+0x28>
 80078dc:	681c      	ldr	r4, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	4421      	add	r1, r4
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	e7d7      	b.n	8007898 <_free_r+0x28>
 80078e8:	d902      	bls.n	80078f0 <_free_r+0x80>
 80078ea:	230c      	movs	r3, #12
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	e7d3      	b.n	8007898 <_free_r+0x28>
 80078f0:	6825      	ldr	r5, [r4, #0]
 80078f2:	1961      	adds	r1, r4, r5
 80078f4:	428b      	cmp	r3, r1
 80078f6:	bf04      	itt	eq
 80078f8:	6819      	ldreq	r1, [r3, #0]
 80078fa:	685b      	ldreq	r3, [r3, #4]
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	bf04      	itt	eq
 8007900:	1949      	addeq	r1, r1, r5
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	6054      	str	r4, [r2, #4]
 8007906:	e7c7      	b.n	8007898 <_free_r+0x28>
 8007908:	b003      	add	sp, #12
 800790a:	bd30      	pop	{r4, r5, pc}
 800790c:	200000b4 	.word	0x200000b4

08007910 <_malloc_r>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	1ccd      	adds	r5, r1, #3
 8007914:	f025 0503 	bic.w	r5, r5, #3
 8007918:	3508      	adds	r5, #8
 800791a:	2d0c      	cmp	r5, #12
 800791c:	bf38      	it	cc
 800791e:	250c      	movcc	r5, #12
 8007920:	2d00      	cmp	r5, #0
 8007922:	4606      	mov	r6, r0
 8007924:	db01      	blt.n	800792a <_malloc_r+0x1a>
 8007926:	42a9      	cmp	r1, r5
 8007928:	d903      	bls.n	8007932 <_malloc_r+0x22>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	2000      	movs	r0, #0
 8007930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007932:	f000 f87d 	bl	8007a30 <__malloc_lock>
 8007936:	4921      	ldr	r1, [pc, #132]	; (80079bc <_malloc_r+0xac>)
 8007938:	680a      	ldr	r2, [r1, #0]
 800793a:	4614      	mov	r4, r2
 800793c:	b99c      	cbnz	r4, 8007966 <_malloc_r+0x56>
 800793e:	4f20      	ldr	r7, [pc, #128]	; (80079c0 <_malloc_r+0xb0>)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	b923      	cbnz	r3, 800794e <_malloc_r+0x3e>
 8007944:	4621      	mov	r1, r4
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f862 	bl	8007a10 <_sbrk_r>
 800794c:	6038      	str	r0, [r7, #0]
 800794e:	4629      	mov	r1, r5
 8007950:	4630      	mov	r0, r6
 8007952:	f000 f85d 	bl	8007a10 <_sbrk_r>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	d123      	bne.n	80079a2 <_malloc_r+0x92>
 800795a:	230c      	movs	r3, #12
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f86c 	bl	8007a3c <__malloc_unlock>
 8007964:	e7e3      	b.n	800792e <_malloc_r+0x1e>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	1b5b      	subs	r3, r3, r5
 800796a:	d417      	bmi.n	800799c <_malloc_r+0x8c>
 800796c:	2b0b      	cmp	r3, #11
 800796e:	d903      	bls.n	8007978 <_malloc_r+0x68>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	441c      	add	r4, r3
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	e004      	b.n	8007982 <_malloc_r+0x72>
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	42a2      	cmp	r2, r4
 800797c:	bf0c      	ite	eq
 800797e:	600b      	streq	r3, [r1, #0]
 8007980:	6053      	strne	r3, [r2, #4]
 8007982:	4630      	mov	r0, r6
 8007984:	f000 f85a 	bl	8007a3c <__malloc_unlock>
 8007988:	f104 000b 	add.w	r0, r4, #11
 800798c:	1d23      	adds	r3, r4, #4
 800798e:	f020 0007 	bic.w	r0, r0, #7
 8007992:	1ac2      	subs	r2, r0, r3
 8007994:	d0cc      	beq.n	8007930 <_malloc_r+0x20>
 8007996:	1a1b      	subs	r3, r3, r0
 8007998:	50a3      	str	r3, [r4, r2]
 800799a:	e7c9      	b.n	8007930 <_malloc_r+0x20>
 800799c:	4622      	mov	r2, r4
 800799e:	6864      	ldr	r4, [r4, #4]
 80079a0:	e7cc      	b.n	800793c <_malloc_r+0x2c>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d0e3      	beq.n	8007974 <_malloc_r+0x64>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 f82e 	bl	8007a10 <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d1dd      	bne.n	8007974 <_malloc_r+0x64>
 80079b8:	e7cf      	b.n	800795a <_malloc_r+0x4a>
 80079ba:	bf00      	nop
 80079bc:	200000b4 	.word	0x200000b4
 80079c0:	200000b8 	.word	0x200000b8

080079c4 <_realloc_r>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	4607      	mov	r7, r0
 80079c8:	4614      	mov	r4, r2
 80079ca:	460e      	mov	r6, r1
 80079cc:	b921      	cbnz	r1, 80079d8 <_realloc_r+0x14>
 80079ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079d2:	4611      	mov	r1, r2
 80079d4:	f7ff bf9c 	b.w	8007910 <_malloc_r>
 80079d8:	b922      	cbnz	r2, 80079e4 <_realloc_r+0x20>
 80079da:	f7ff ff49 	bl	8007870 <_free_r>
 80079de:	4625      	mov	r5, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	f000 f830 	bl	8007a48 <_malloc_usable_size_r>
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d20f      	bcs.n	8007a0c <_realloc_r+0x48>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7ff ff8e 	bl	8007910 <_malloc_r>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0f2      	beq.n	80079e0 <_realloc_r+0x1c>
 80079fa:	4631      	mov	r1, r6
 80079fc:	4622      	mov	r2, r4
 80079fe:	f7ff ff0f 	bl	8007820 <memcpy>
 8007a02:	4631      	mov	r1, r6
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ff33 	bl	8007870 <_free_r>
 8007a0a:	e7e9      	b.n	80079e0 <_realloc_r+0x1c>
 8007a0c:	4635      	mov	r5, r6
 8007a0e:	e7e7      	b.n	80079e0 <_realloc_r+0x1c>

08007a10 <_sbrk_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	; (8007a2c <_sbrk_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7fa f8f6 	bl	8001c0c <_sbrk>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_sbrk_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_sbrk_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	2000042c 	.word	0x2000042c

08007a30 <__malloc_lock>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__malloc_lock+0x8>)
 8007a32:	f000 b811 	b.w	8007a58 <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000434 	.word	0x20000434

08007a3c <__malloc_unlock>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__malloc_unlock+0x8>)
 8007a3e:	f000 b80c 	b.w	8007a5a <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	20000434 	.word	0x20000434

08007a48 <_malloc_usable_size_r>:
 8007a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4c:	1f18      	subs	r0, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfbc      	itt	lt
 8007a52:	580b      	ldrlt	r3, [r1, r0]
 8007a54:	18c0      	addlt	r0, r0, r3
 8007a56:	4770      	bx	lr

08007a58 <__retarget_lock_acquire_recursive>:
 8007a58:	4770      	bx	lr

08007a5a <__retarget_lock_release_recursive>:
 8007a5a:	4770      	bx	lr

08007a5c <_init>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

08007a68 <_fini>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr
